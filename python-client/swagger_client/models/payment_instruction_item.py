# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.payment_currency_amount import PaymentCurrencyAmount  # noqa: F401,E501
from swagger_client.models.payment_iban_detail import PaymentIBANDetail  # noqa: F401,E501
from swagger_client.models.payment_isr_detail import PaymentISRDetail  # noqa: F401,E501
from swagger_client.models.payment_other_detail import PaymentOtherDetail  # noqa: F401,E501


class PaymentInstructionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instruction_id': 'str',
        'end_to_end_id': 'str',
        'instructed_amount': 'PaymentCurrencyAmount',
        'iban_details': 'PaymentIBANDetail',
        'isr_details': 'PaymentISRDetail',
        'other_details': 'PaymentOtherDetail'
    }

    attribute_map = {
        'instruction_id': 'instructionId',
        'end_to_end_id': 'endToEndId',
        'instructed_amount': 'instructedAmount',
        'iban_details': 'ibanDetails',
        'isr_details': 'isrDetails',
        'other_details': 'otherDetails'
    }

    def __init__(self, instruction_id=None, end_to_end_id=None, instructed_amount=None, iban_details=None, isr_details=None, other_details=None):  # noqa: E501
        """PaymentInstructionItem - a model defined in Swagger"""  # noqa: E501

        self._instruction_id = None
        self._end_to_end_id = None
        self._instructed_amount = None
        self._iban_details = None
        self._isr_details = None
        self._other_details = None
        self.discriminator = None

        self.instruction_id = instruction_id
        self.end_to_end_id = end_to_end_id
        self.instructed_amount = instructed_amount
        if iban_details is not None:
            self.iban_details = iban_details
        if isr_details is not None:
            self.isr_details = isr_details
        if other_details is not None:
            self.other_details = other_details

    @property
    def instruction_id(self):
        """Gets the instruction_id of this PaymentInstructionItem.  # noqa: E501


        :return: The instruction_id of this PaymentInstructionItem.  # noqa: E501
        :rtype: str
        """
        return self._instruction_id

    @instruction_id.setter
    def instruction_id(self, instruction_id):
        """Sets the instruction_id of this PaymentInstructionItem.


        :param instruction_id: The instruction_id of this PaymentInstructionItem.  # noqa: E501
        :type: str
        """
        if instruction_id is None:
            raise ValueError("Invalid value for `instruction_id`, must not be `None`")  # noqa: E501
        if instruction_id is not None and len(instruction_id) > 35:
            raise ValueError("Invalid value for `instruction_id`, length must be less than or equal to `35`")  # noqa: E501

        self._instruction_id = instruction_id

    @property
    def end_to_end_id(self):
        """Gets the end_to_end_id of this PaymentInstructionItem.  # noqa: E501


        :return: The end_to_end_id of this PaymentInstructionItem.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_id

    @end_to_end_id.setter
    def end_to_end_id(self, end_to_end_id):
        """Sets the end_to_end_id of this PaymentInstructionItem.


        :param end_to_end_id: The end_to_end_id of this PaymentInstructionItem.  # noqa: E501
        :type: str
        """
        if end_to_end_id is None:
            raise ValueError("Invalid value for `end_to_end_id`, must not be `None`")  # noqa: E501
        if end_to_end_id is not None and len(end_to_end_id) > 35:
            raise ValueError("Invalid value for `end_to_end_id`, length must be less than or equal to `35`")  # noqa: E501

        self._end_to_end_id = end_to_end_id

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this PaymentInstructionItem.  # noqa: E501


        :return: The instructed_amount of this PaymentInstructionItem.  # noqa: E501
        :rtype: PaymentCurrencyAmount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this PaymentInstructionItem.


        :param instructed_amount: The instructed_amount of this PaymentInstructionItem.  # noqa: E501
        :type: PaymentCurrencyAmount
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")  # noqa: E501

        self._instructed_amount = instructed_amount

    @property
    def iban_details(self):
        """Gets the iban_details of this PaymentInstructionItem.  # noqa: E501


        :return: The iban_details of this PaymentInstructionItem.  # noqa: E501
        :rtype: PaymentIBANDetail
        """
        return self._iban_details

    @iban_details.setter
    def iban_details(self, iban_details):
        """Sets the iban_details of this PaymentInstructionItem.


        :param iban_details: The iban_details of this PaymentInstructionItem.  # noqa: E501
        :type: PaymentIBANDetail
        """

        self._iban_details = iban_details

    @property
    def isr_details(self):
        """Gets the isr_details of this PaymentInstructionItem.  # noqa: E501


        :return: The isr_details of this PaymentInstructionItem.  # noqa: E501
        :rtype: PaymentISRDetail
        """
        return self._isr_details

    @isr_details.setter
    def isr_details(self, isr_details):
        """Sets the isr_details of this PaymentInstructionItem.


        :param isr_details: The isr_details of this PaymentInstructionItem.  # noqa: E501
        :type: PaymentISRDetail
        """

        self._isr_details = isr_details

    @property
    def other_details(self):
        """Gets the other_details of this PaymentInstructionItem.  # noqa: E501


        :return: The other_details of this PaymentInstructionItem.  # noqa: E501
        :rtype: PaymentOtherDetail
        """
        return self._other_details

    @other_details.setter
    def other_details(self, other_details):
        """Sets the other_details of this PaymentInstructionItem.


        :param other_details: The other_details of this PaymentInstructionItem.  # noqa: E501
        :type: PaymentOtherDetail
        """

        self._other_details = other_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentInstructionItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentInstructionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
