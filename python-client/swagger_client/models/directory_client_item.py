# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.directory_contact import DirectoryContact  # noqa: F401,E501
from swagger_client.models.directory_image_reference import DirectoryImageReference  # noqa: F401,E501
from swagger_client.models.directory_marketing_description import DirectoryMarketingDescription  # noqa: F401,E501
from swagger_client.models.directory_multisize_image_reference import DirectoryMultisizeImageReference  # noqa: F401,E501
from swagger_client.models.directory_participant_status import DirectoryParticipantStatus  # noqa: F401,E501
from swagger_client.models.directory_short_description import DirectoryShortDescription  # noqa: F401,E501
from swagger_client.models.directory_software_description import DirectorySoftwareDescription  # noqa: F401,E501
from swagger_client.models.directory_use_case_item import DirectoryUseCaseItem  # noqa: F401,E501


class DirectoryClientItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_name': 'str',
        'contact': 'list[DirectoryContact]',
        'company_logo': 'DirectoryMultisizeImageReference',
        'marketing_image': 'DirectoryImageReference',
        'company_url': 'str',
        'marketing_description': 'DirectoryMarketingDescription',
        'short_description': 'DirectoryShortDescription',
        'status': 'DirectoryParticipantStatus',
        'registration_date': 'date',
        'last_modified': 'datetime',
        'software': 'DirectorySoftwareDescription',
        'use_cases': 'list[DirectoryUseCaseItem]'
    }

    attribute_map = {
        'company_name': 'companyName',
        'contact': 'contact',
        'company_logo': 'companyLogo',
        'marketing_image': 'marketingImage',
        'company_url': 'companyUrl',
        'marketing_description': 'marketingDescription',
        'short_description': 'shortDescription',
        'status': 'status',
        'registration_date': 'registrationDate',
        'last_modified': 'lastModified',
        'software': 'software',
        'use_cases': 'useCases'
    }

    def __init__(self, company_name=None, contact=None, company_logo=None, marketing_image=None, company_url=None, marketing_description=None, short_description=None, status=None, registration_date=None, last_modified=None, software=None, use_cases=None):  # noqa: E501
        """DirectoryClientItem - a model defined in Swagger"""  # noqa: E501

        self._company_name = None
        self._contact = None
        self._company_logo = None
        self._marketing_image = None
        self._company_url = None
        self._marketing_description = None
        self._short_description = None
        self._status = None
        self._registration_date = None
        self._last_modified = None
        self._software = None
        self._use_cases = None
        self.discriminator = None

        self.company_name = company_name
        self.contact = contact
        self.company_logo = company_logo
        if marketing_image is not None:
            self.marketing_image = marketing_image
        self.company_url = company_url
        self.marketing_description = marketing_description
        self.short_description = short_description
        self.status = status
        self.registration_date = registration_date
        self.last_modified = last_modified
        self.software = software
        if use_cases is not None:
            self.use_cases = use_cases

    @property
    def company_name(self):
        """Gets the company_name of this DirectoryClientItem.  # noqa: E501


        :return: The company_name of this DirectoryClientItem.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this DirectoryClientItem.


        :param company_name: The company_name of this DirectoryClientItem.  # noqa: E501
        :type: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501
        if company_name is not None and len(company_name) > 50:
            raise ValueError("Invalid value for `company_name`, length must be less than or equal to `50`")  # noqa: E501

        self._company_name = company_name

    @property
    def contact(self):
        """Gets the contact of this DirectoryClientItem.  # noqa: E501


        :return: The contact of this DirectoryClientItem.  # noqa: E501
        :rtype: list[DirectoryContact]
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this DirectoryClientItem.


        :param contact: The contact of this DirectoryClientItem.  # noqa: E501
        :type: list[DirectoryContact]
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")  # noqa: E501

        self._contact = contact

    @property
    def company_logo(self):
        """Gets the company_logo of this DirectoryClientItem.  # noqa: E501


        :return: The company_logo of this DirectoryClientItem.  # noqa: E501
        :rtype: DirectoryMultisizeImageReference
        """
        return self._company_logo

    @company_logo.setter
    def company_logo(self, company_logo):
        """Sets the company_logo of this DirectoryClientItem.


        :param company_logo: The company_logo of this DirectoryClientItem.  # noqa: E501
        :type: DirectoryMultisizeImageReference
        """
        if company_logo is None:
            raise ValueError("Invalid value for `company_logo`, must not be `None`")  # noqa: E501

        self._company_logo = company_logo

    @property
    def marketing_image(self):
        """Gets the marketing_image of this DirectoryClientItem.  # noqa: E501


        :return: The marketing_image of this DirectoryClientItem.  # noqa: E501
        :rtype: DirectoryImageReference
        """
        return self._marketing_image

    @marketing_image.setter
    def marketing_image(self, marketing_image):
        """Sets the marketing_image of this DirectoryClientItem.


        :param marketing_image: The marketing_image of this DirectoryClientItem.  # noqa: E501
        :type: DirectoryImageReference
        """

        self._marketing_image = marketing_image

    @property
    def company_url(self):
        """Gets the company_url of this DirectoryClientItem.  # noqa: E501


        :return: The company_url of this DirectoryClientItem.  # noqa: E501
        :rtype: str
        """
        return self._company_url

    @company_url.setter
    def company_url(self, company_url):
        """Sets the company_url of this DirectoryClientItem.


        :param company_url: The company_url of this DirectoryClientItem.  # noqa: E501
        :type: str
        """
        if company_url is None:
            raise ValueError("Invalid value for `company_url`, must not be `None`")  # noqa: E501

        self._company_url = company_url

    @property
    def marketing_description(self):
        """Gets the marketing_description of this DirectoryClientItem.  # noqa: E501


        :return: The marketing_description of this DirectoryClientItem.  # noqa: E501
        :rtype: DirectoryMarketingDescription
        """
        return self._marketing_description

    @marketing_description.setter
    def marketing_description(self, marketing_description):
        """Sets the marketing_description of this DirectoryClientItem.


        :param marketing_description: The marketing_description of this DirectoryClientItem.  # noqa: E501
        :type: DirectoryMarketingDescription
        """
        if marketing_description is None:
            raise ValueError("Invalid value for `marketing_description`, must not be `None`")  # noqa: E501

        self._marketing_description = marketing_description

    @property
    def short_description(self):
        """Gets the short_description of this DirectoryClientItem.  # noqa: E501


        :return: The short_description of this DirectoryClientItem.  # noqa: E501
        :rtype: DirectoryShortDescription
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this DirectoryClientItem.


        :param short_description: The short_description of this DirectoryClientItem.  # noqa: E501
        :type: DirectoryShortDescription
        """
        if short_description is None:
            raise ValueError("Invalid value for `short_description`, must not be `None`")  # noqa: E501

        self._short_description = short_description

    @property
    def status(self):
        """Gets the status of this DirectoryClientItem.  # noqa: E501


        :return: The status of this DirectoryClientItem.  # noqa: E501
        :rtype: DirectoryParticipantStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DirectoryClientItem.


        :param status: The status of this DirectoryClientItem.  # noqa: E501
        :type: DirectoryParticipantStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def registration_date(self):
        """Gets the registration_date of this DirectoryClientItem.  # noqa: E501


        :return: The registration_date of this DirectoryClientItem.  # noqa: E501
        :rtype: date
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this DirectoryClientItem.


        :param registration_date: The registration_date of this DirectoryClientItem.  # noqa: E501
        :type: date
        """
        if registration_date is None:
            raise ValueError("Invalid value for `registration_date`, must not be `None`")  # noqa: E501

        self._registration_date = registration_date

    @property
    def last_modified(self):
        """Gets the last_modified of this DirectoryClientItem.  # noqa: E501


        :return: The last_modified of this DirectoryClientItem.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this DirectoryClientItem.


        :param last_modified: The last_modified of this DirectoryClientItem.  # noqa: E501
        :type: datetime
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")  # noqa: E501

        self._last_modified = last_modified

    @property
    def software(self):
        """Gets the software of this DirectoryClientItem.  # noqa: E501


        :return: The software of this DirectoryClientItem.  # noqa: E501
        :rtype: DirectorySoftwareDescription
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this DirectoryClientItem.


        :param software: The software of this DirectoryClientItem.  # noqa: E501
        :type: DirectorySoftwareDescription
        """
        if software is None:
            raise ValueError("Invalid value for `software`, must not be `None`")  # noqa: E501

        self._software = software

    @property
    def use_cases(self):
        """Gets the use_cases of this DirectoryClientItem.  # noqa: E501


        :return: The use_cases of this DirectoryClientItem.  # noqa: E501
        :rtype: list[DirectoryUseCaseItem]
        """
        return self._use_cases

    @use_cases.setter
    def use_cases(self, use_cases):
        """Sets the use_cases of this DirectoryClientItem.


        :param use_cases: The use_cases of this DirectoryClientItem.  # noqa: E501
        :type: list[DirectoryUseCaseItem]
        """

        self._use_cases = use_cases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryClientItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryClientItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
