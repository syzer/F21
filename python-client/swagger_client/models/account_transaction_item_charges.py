# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.account_transaction_item_charges_record import AccountTransactionItemChargesRecord  # noqa: F401,E501


class AccountTransactionItemCharges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'currency': 'str',
        'charge_records': 'list[AccountTransactionItemChargesRecord]'
    }

    attribute_map = {
        'amount': 'amount',
        'currency': 'currency',
        'charge_records': 'chargeRecords'
    }

    def __init__(self, amount=None, currency=None, charge_records=None):  # noqa: E501
        """AccountTransactionItemCharges - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._currency = None
        self._charge_records = None
        self.discriminator = None

        self.amount = amount
        self.currency = currency
        if charge_records is not None:
            self.charge_records = charge_records

    @property
    def amount(self):
        """Gets the amount of this AccountTransactionItemCharges.  # noqa: E501


        :return: The amount of this AccountTransactionItemCharges.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AccountTransactionItemCharges.


        :param amount: The amount of this AccountTransactionItemCharges.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
        if amount is not None and len(amount) > 18:
            raise ValueError("Invalid value for `amount`, length must be less than or equal to `18`")  # noqa: E501
        if amount is not None and not re.search(r'[0-9]{1,12}([.][0-9]{1,5})?', amount):  # noqa: E501
            raise ValueError(r"Invalid value for `amount`, must be a follow pattern or equal to `/[0-9]{1,12}([.][0-9]{1,5})?/`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this AccountTransactionItemCharges.  # noqa: E501


        :return: The currency of this AccountTransactionItemCharges.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountTransactionItemCharges.


        :param currency: The currency of this AccountTransactionItemCharges.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def charge_records(self):
        """Gets the charge_records of this AccountTransactionItemCharges.  # noqa: E501


        :return: The charge_records of this AccountTransactionItemCharges.  # noqa: E501
        :rtype: list[AccountTransactionItemChargesRecord]
        """
        return self._charge_records

    @charge_records.setter
    def charge_records(self, charge_records):
        """Sets the charge_records of this AccountTransactionItemCharges.


        :param charge_records: The charge_records of this AccountTransactionItemCharges.  # noqa: E501
        :type: list[AccountTransactionItemChargesRecord]
        """

        self._charge_records = charge_records

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountTransactionItemCharges, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountTransactionItemCharges):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
