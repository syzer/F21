# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.account_transaction_bank_transaction_code import AccountTransactionBankTransactionCode  # noqa: F401,E501
from swagger_client.models.account_transaction_instructed_amount import AccountTransactionInstructedAmount  # noqa: F401,E501
from swagger_client.models.account_transaction_item import AccountTransactionItem  # noqa: F401,E501
from swagger_client.models.account_transaction_item_charges import AccountTransactionItemCharges  # noqa: F401,E501
from swagger_client.models.account_transaction_transaction_type import AccountTransactionTransactionType  # noqa: F401,E501
from swagger_client.models.payment_currency_amount import PaymentCurrencyAmount  # noqa: F401,E501


class AccountTransactionEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_id': 'str',
        'transaction_type': 'AccountTransactionTransactionType',
        'entry_reference': 'str',
        'entry_reference_internal_id': 'str',
        'reversal_indicator': 'bool',
        'booking_date': 'date',
        'value_date': 'date',
        'amount': 'PaymentCurrencyAmount',
        'instructed_amount': 'AccountTransactionInstructedAmount',
        'total_charges_amount': 'AccountTransactionItemCharges',
        'bank_transaction_code': 'AccountTransactionBankTransactionCode',
        'additional_entry_information': 'str',
        'transactions': 'list[AccountTransactionItem]'
    }

    attribute_map = {
        'entry_id': 'entryId',
        'transaction_type': 'transactionType',
        'entry_reference': 'entryReference',
        'entry_reference_internal_id': 'entryReferenceInternalId',
        'reversal_indicator': 'reversalIndicator',
        'booking_date': 'bookingDate',
        'value_date': 'valueDate',
        'amount': 'amount',
        'instructed_amount': 'instructedAmount',
        'total_charges_amount': 'totalChargesAmount',
        'bank_transaction_code': 'bankTransactionCode',
        'additional_entry_information': 'additionalEntryInformation',
        'transactions': 'transactions'
    }

    def __init__(self, entry_id=None, transaction_type=None, entry_reference=None, entry_reference_internal_id=None, reversal_indicator=None, booking_date=None, value_date=None, amount=None, instructed_amount=None, total_charges_amount=None, bank_transaction_code=None, additional_entry_information=None, transactions=None):  # noqa: E501
        """AccountTransactionEntry - a model defined in Swagger"""  # noqa: E501

        self._entry_id = None
        self._transaction_type = None
        self._entry_reference = None
        self._entry_reference_internal_id = None
        self._reversal_indicator = None
        self._booking_date = None
        self._value_date = None
        self._amount = None
        self._instructed_amount = None
        self._total_charges_amount = None
        self._bank_transaction_code = None
        self._additional_entry_information = None
        self._transactions = None
        self.discriminator = None

        self.entry_id = entry_id
        self.transaction_type = transaction_type
        if entry_reference is not None:
            self.entry_reference = entry_reference
        if entry_reference_internal_id is not None:
            self.entry_reference_internal_id = entry_reference_internal_id
        if reversal_indicator is not None:
            self.reversal_indicator = reversal_indicator
        self.booking_date = booking_date
        self.value_date = value_date
        self.amount = amount
        if instructed_amount is not None:
            self.instructed_amount = instructed_amount
        if total_charges_amount is not None:
            self.total_charges_amount = total_charges_amount
        self.bank_transaction_code = bank_transaction_code
        if additional_entry_information is not None:
            self.additional_entry_information = additional_entry_information
        if transactions is not None:
            self.transactions = transactions

    @property
    def entry_id(self):
        """Gets the entry_id of this AccountTransactionEntry.  # noqa: E501


        :return: The entry_id of this AccountTransactionEntry.  # noqa: E501
        :rtype: str
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this AccountTransactionEntry.


        :param entry_id: The entry_id of this AccountTransactionEntry.  # noqa: E501
        :type: str
        """
        if entry_id is None:
            raise ValueError("Invalid value for `entry_id`, must not be `None`")  # noqa: E501

        self._entry_id = entry_id

    @property
    def transaction_type(self):
        """Gets the transaction_type of this AccountTransactionEntry.  # noqa: E501


        :return: The transaction_type of this AccountTransactionEntry.  # noqa: E501
        :rtype: AccountTransactionTransactionType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this AccountTransactionEntry.


        :param transaction_type: The transaction_type of this AccountTransactionEntry.  # noqa: E501
        :type: AccountTransactionTransactionType
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def entry_reference(self):
        """Gets the entry_reference of this AccountTransactionEntry.  # noqa: E501


        :return: The entry_reference of this AccountTransactionEntry.  # noqa: E501
        :rtype: str
        """
        return self._entry_reference

    @entry_reference.setter
    def entry_reference(self, entry_reference):
        """Sets the entry_reference of this AccountTransactionEntry.


        :param entry_reference: The entry_reference of this AccountTransactionEntry.  # noqa: E501
        :type: str
        """

        self._entry_reference = entry_reference

    @property
    def entry_reference_internal_id(self):
        """Gets the entry_reference_internal_id of this AccountTransactionEntry.  # noqa: E501


        :return: The entry_reference_internal_id of this AccountTransactionEntry.  # noqa: E501
        :rtype: str
        """
        return self._entry_reference_internal_id

    @entry_reference_internal_id.setter
    def entry_reference_internal_id(self, entry_reference_internal_id):
        """Sets the entry_reference_internal_id of this AccountTransactionEntry.


        :param entry_reference_internal_id: The entry_reference_internal_id of this AccountTransactionEntry.  # noqa: E501
        :type: str
        """

        self._entry_reference_internal_id = entry_reference_internal_id

    @property
    def reversal_indicator(self):
        """Gets the reversal_indicator of this AccountTransactionEntry.  # noqa: E501


        :return: The reversal_indicator of this AccountTransactionEntry.  # noqa: E501
        :rtype: bool
        """
        return self._reversal_indicator

    @reversal_indicator.setter
    def reversal_indicator(self, reversal_indicator):
        """Sets the reversal_indicator of this AccountTransactionEntry.


        :param reversal_indicator: The reversal_indicator of this AccountTransactionEntry.  # noqa: E501
        :type: bool
        """

        self._reversal_indicator = reversal_indicator

    @property
    def booking_date(self):
        """Gets the booking_date of this AccountTransactionEntry.  # noqa: E501


        :return: The booking_date of this AccountTransactionEntry.  # noqa: E501
        :rtype: date
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this AccountTransactionEntry.


        :param booking_date: The booking_date of this AccountTransactionEntry.  # noqa: E501
        :type: date
        """
        if booking_date is None:
            raise ValueError("Invalid value for `booking_date`, must not be `None`")  # noqa: E501

        self._booking_date = booking_date

    @property
    def value_date(self):
        """Gets the value_date of this AccountTransactionEntry.  # noqa: E501


        :return: The value_date of this AccountTransactionEntry.  # noqa: E501
        :rtype: date
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this AccountTransactionEntry.


        :param value_date: The value_date of this AccountTransactionEntry.  # noqa: E501
        :type: date
        """
        if value_date is None:
            raise ValueError("Invalid value for `value_date`, must not be `None`")  # noqa: E501

        self._value_date = value_date

    @property
    def amount(self):
        """Gets the amount of this AccountTransactionEntry.  # noqa: E501


        :return: The amount of this AccountTransactionEntry.  # noqa: E501
        :rtype: PaymentCurrencyAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AccountTransactionEntry.


        :param amount: The amount of this AccountTransactionEntry.  # noqa: E501
        :type: PaymentCurrencyAmount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this AccountTransactionEntry.  # noqa: E501


        :return: The instructed_amount of this AccountTransactionEntry.  # noqa: E501
        :rtype: AccountTransactionInstructedAmount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this AccountTransactionEntry.


        :param instructed_amount: The instructed_amount of this AccountTransactionEntry.  # noqa: E501
        :type: AccountTransactionInstructedAmount
        """

        self._instructed_amount = instructed_amount

    @property
    def total_charges_amount(self):
        """Gets the total_charges_amount of this AccountTransactionEntry.  # noqa: E501


        :return: The total_charges_amount of this AccountTransactionEntry.  # noqa: E501
        :rtype: AccountTransactionItemCharges
        """
        return self._total_charges_amount

    @total_charges_amount.setter
    def total_charges_amount(self, total_charges_amount):
        """Sets the total_charges_amount of this AccountTransactionEntry.


        :param total_charges_amount: The total_charges_amount of this AccountTransactionEntry.  # noqa: E501
        :type: AccountTransactionItemCharges
        """

        self._total_charges_amount = total_charges_amount

    @property
    def bank_transaction_code(self):
        """Gets the bank_transaction_code of this AccountTransactionEntry.  # noqa: E501


        :return: The bank_transaction_code of this AccountTransactionEntry.  # noqa: E501
        :rtype: AccountTransactionBankTransactionCode
        """
        return self._bank_transaction_code

    @bank_transaction_code.setter
    def bank_transaction_code(self, bank_transaction_code):
        """Sets the bank_transaction_code of this AccountTransactionEntry.


        :param bank_transaction_code: The bank_transaction_code of this AccountTransactionEntry.  # noqa: E501
        :type: AccountTransactionBankTransactionCode
        """
        if bank_transaction_code is None:
            raise ValueError("Invalid value for `bank_transaction_code`, must not be `None`")  # noqa: E501

        self._bank_transaction_code = bank_transaction_code

    @property
    def additional_entry_information(self):
        """Gets the additional_entry_information of this AccountTransactionEntry.  # noqa: E501


        :return: The additional_entry_information of this AccountTransactionEntry.  # noqa: E501
        :rtype: str
        """
        return self._additional_entry_information

    @additional_entry_information.setter
    def additional_entry_information(self, additional_entry_information):
        """Sets the additional_entry_information of this AccountTransactionEntry.


        :param additional_entry_information: The additional_entry_information of this AccountTransactionEntry.  # noqa: E501
        :type: str
        """

        self._additional_entry_information = additional_entry_information

    @property
    def transactions(self):
        """Gets the transactions of this AccountTransactionEntry.  # noqa: E501


        :return: The transactions of this AccountTransactionEntry.  # noqa: E501
        :rtype: list[AccountTransactionItem]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this AccountTransactionEntry.


        :param transactions: The transactions of this AccountTransactionEntry.  # noqa: E501
        :type: list[AccountTransactionItem]
        """

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountTransactionEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountTransactionEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
