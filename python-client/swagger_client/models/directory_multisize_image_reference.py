# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.directory_image_reference import DirectoryImageReference  # noqa: F401,E501


class DirectoryMultisizeImageReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'small': 'DirectoryImageReference',
        'large': 'DirectoryImageReference'
    }

    attribute_map = {
        'small': 'small',
        'large': 'large'
    }

    def __init__(self, small=None, large=None):  # noqa: E501
        """DirectoryMultisizeImageReference - a model defined in Swagger"""  # noqa: E501

        self._small = None
        self._large = None
        self.discriminator = None

        self.small = small
        self.large = large

    @property
    def small(self):
        """Gets the small of this DirectoryMultisizeImageReference.  # noqa: E501


        :return: The small of this DirectoryMultisizeImageReference.  # noqa: E501
        :rtype: DirectoryImageReference
        """
        return self._small

    @small.setter
    def small(self, small):
        """Sets the small of this DirectoryMultisizeImageReference.


        :param small: The small of this DirectoryMultisizeImageReference.  # noqa: E501
        :type: DirectoryImageReference
        """
        if small is None:
            raise ValueError("Invalid value for `small`, must not be `None`")  # noqa: E501

        self._small = small

    @property
    def large(self):
        """Gets the large of this DirectoryMultisizeImageReference.  # noqa: E501


        :return: The large of this DirectoryMultisizeImageReference.  # noqa: E501
        :rtype: DirectoryImageReference
        """
        return self._large

    @large.setter
    def large(self, large):
        """Sets the large of this DirectoryMultisizeImageReference.


        :param large: The large of this DirectoryMultisizeImageReference.  # noqa: E501
        :type: DirectoryImageReference
        """
        if large is None:
            raise ValueError("Invalid value for `large`, must not be `None`")  # noqa: E501

        self._large = large

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryMultisizeImageReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryMultisizeImageReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
