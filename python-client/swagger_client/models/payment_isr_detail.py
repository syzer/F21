# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.payment_creditor import PaymentCreditor  # noqa: F401,E501
from swagger_client.models.payment_isr_remittance_reference import PaymentIsrRemittanceReference  # noqa: F401,E501
from swagger_client.models.payment_other_account import PaymentOtherAccount  # noqa: F401,E501


class PaymentISRDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creditor_account': 'PaymentOtherAccount',
        'creditor': 'PaymentCreditor',
        'remittance_reference': 'PaymentIsrRemittanceReference'
    }

    attribute_map = {
        'creditor_account': 'creditorAccount',
        'creditor': 'creditor',
        'remittance_reference': 'remittanceReference'
    }

    def __init__(self, creditor_account=None, creditor=None, remittance_reference=None):  # noqa: E501
        """PaymentISRDetail - a model defined in Swagger"""  # noqa: E501

        self._creditor_account = None
        self._creditor = None
        self._remittance_reference = None
        self.discriminator = None

        if creditor_account is not None:
            self.creditor_account = creditor_account
        if creditor is not None:
            self.creditor = creditor
        if remittance_reference is not None:
            self.remittance_reference = remittance_reference

    @property
    def creditor_account(self):
        """Gets the creditor_account of this PaymentISRDetail.  # noqa: E501


        :return: The creditor_account of this PaymentISRDetail.  # noqa: E501
        :rtype: PaymentOtherAccount
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this PaymentISRDetail.


        :param creditor_account: The creditor_account of this PaymentISRDetail.  # noqa: E501
        :type: PaymentOtherAccount
        """

        self._creditor_account = creditor_account

    @property
    def creditor(self):
        """Gets the creditor of this PaymentISRDetail.  # noqa: E501


        :return: The creditor of this PaymentISRDetail.  # noqa: E501
        :rtype: PaymentCreditor
        """
        return self._creditor

    @creditor.setter
    def creditor(self, creditor):
        """Sets the creditor of this PaymentISRDetail.


        :param creditor: The creditor of this PaymentISRDetail.  # noqa: E501
        :type: PaymentCreditor
        """

        self._creditor = creditor

    @property
    def remittance_reference(self):
        """Gets the remittance_reference of this PaymentISRDetail.  # noqa: E501


        :return: The remittance_reference of this PaymentISRDetail.  # noqa: E501
        :rtype: PaymentIsrRemittanceReference
        """
        return self._remittance_reference

    @remittance_reference.setter
    def remittance_reference(self, remittance_reference):
        """Sets the remittance_reference of this PaymentISRDetail.


        :param remittance_reference: The remittance_reference of this PaymentISRDetail.  # noqa: E501
        :type: PaymentIsrRemittanceReference
        """

        self._remittance_reference = remittance_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentISRDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentISRDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
