# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CommonErrorType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    INVALID_PAYLOAD = "/problems/INVALID_PAYLOAD"
    MALFORMED_PAYLOAD = "/problems/MALFORMED_PAYLOAD"
    INVALID_TOKEN = "/problems/INVALID_TOKEN"
    EXPIRED_TOKEN = "/problems/EXPIRED_TOKEN"
    INSUFFICIENT_PRIVILEGES = "/problems/INSUFFICIENT_PRIVILEGES"
    NO_ACCESS_TO_RESOURCE = "/problems/NO_ACCESS_TO_RESOURCE"
    RESOURCE_DOES_NOT_EXIST = "/problems/RESOURCE_DOES_NOT_EXIST"
    RESOURCE_NOT_READY = "/problems/RESOURCE_NOT_READY"
    RESOURCE_TOO_LARGE = "/problems/RESOURCE_TOO_LARGE"
    WRONG_METHOD = "/problems/WRONG_METHOD"
    OPERATION_NOT_ALLOWED = "/problems/OPERATION_NOT_ALLOWED"
    TECHNICAL_ERROR = "/problems/TECHNICAL_ERROR"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """CommonErrorType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonErrorType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonErrorType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
