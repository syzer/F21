# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DirectoryContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'designation': 'str',
        'email_address': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'type': 'type',
        'designation': 'designation',
        'email_address': 'emailAddress',
        'phone': 'phone'
    }

    def __init__(self, type=None, designation=None, email_address=None, phone=None):  # noqa: E501
        """DirectoryContact - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._designation = None
        self._email_address = None
        self._phone = None
        self.discriminator = None

        self.type = type
        if designation is not None:
            self.designation = designation
        self.email_address = email_address
        if phone is not None:
            self.phone = phone

    @property
    def type(self):
        """Gets the type of this DirectoryContact.  # noqa: E501


        :return: The type of this DirectoryContact.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DirectoryContact.


        :param type: The type of this DirectoryContact.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["BUSINESS", "TECHNICAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def designation(self):
        """Gets the designation of this DirectoryContact.  # noqa: E501


        :return: The designation of this DirectoryContact.  # noqa: E501
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this DirectoryContact.


        :param designation: The designation of this DirectoryContact.  # noqa: E501
        :type: str
        """
        if designation is not None and len(designation) > 80:
            raise ValueError("Invalid value for `designation`, length must be less than or equal to `80`")  # noqa: E501

        self._designation = designation

    @property
    def email_address(self):
        """Gets the email_address of this DirectoryContact.  # noqa: E501


        :return: The email_address of this DirectoryContact.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this DirectoryContact.


        :param email_address: The email_address of this DirectoryContact.  # noqa: E501
        :type: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501
        if email_address is not None and len(email_address) > 50:
            raise ValueError("Invalid value for `email_address`, length must be less than or equal to `50`")  # noqa: E501

        self._email_address = email_address

    @property
    def phone(self):
        """Gets the phone of this DirectoryContact.  # noqa: E501


        :return: The phone of this DirectoryContact.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this DirectoryContact.


        :param phone: The phone of this DirectoryContact.  # noqa: E501
        :type: str
        """
        if phone is not None and len(phone) > 20:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `20`")  # noqa: E501

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
