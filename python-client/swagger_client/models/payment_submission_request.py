# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.payment_booking_instruction import PaymentBookingInstruction  # noqa: F401,E501
from swagger_client.models.payment_iban_account import PaymentIbanAccount  # noqa: F401,E501
from swagger_client.models.payment_instruction_item import PaymentInstructionItem  # noqa: F401,E501


class PaymentSubmissionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_id': 'str',
        'initiating_party_id': 'str',
        'requested_execution_date': 'date',
        'debtor_account': 'PaymentIbanAccount',
        'booking_instruction': 'PaymentBookingInstruction',
        'transactions': 'list[PaymentInstructionItem]'
    }

    attribute_map = {
        'message_id': 'messageId',
        'initiating_party_id': 'initiatingPartyId',
        'requested_execution_date': 'requestedExecutionDate',
        'debtor_account': 'debtorAccount',
        'booking_instruction': 'bookingInstruction',
        'transactions': 'transactions'
    }

    def __init__(self, message_id=None, initiating_party_id=None, requested_execution_date=None, debtor_account=None, booking_instruction=None, transactions=None):  # noqa: E501
        """PaymentSubmissionRequest - a model defined in Swagger"""  # noqa: E501

        self._message_id = None
        self._initiating_party_id = None
        self._requested_execution_date = None
        self._debtor_account = None
        self._booking_instruction = None
        self._transactions = None
        self.discriminator = None

        self.message_id = message_id
        self.initiating_party_id = initiating_party_id
        self.requested_execution_date = requested_execution_date
        self.debtor_account = debtor_account
        self.booking_instruction = booking_instruction
        self.transactions = transactions

    @property
    def message_id(self):
        """Gets the message_id of this PaymentSubmissionRequest.  # noqa: E501


        :return: The message_id of this PaymentSubmissionRequest.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this PaymentSubmissionRequest.


        :param message_id: The message_id of this PaymentSubmissionRequest.  # noqa: E501
        :type: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501
        if message_id is not None and len(message_id) > 35:
            raise ValueError("Invalid value for `message_id`, length must be less than or equal to `35`")  # noqa: E501

        self._message_id = message_id

    @property
    def initiating_party_id(self):
        """Gets the initiating_party_id of this PaymentSubmissionRequest.  # noqa: E501


        :return: The initiating_party_id of this PaymentSubmissionRequest.  # noqa: E501
        :rtype: str
        """
        return self._initiating_party_id

    @initiating_party_id.setter
    def initiating_party_id(self, initiating_party_id):
        """Sets the initiating_party_id of this PaymentSubmissionRequest.


        :param initiating_party_id: The initiating_party_id of this PaymentSubmissionRequest.  # noqa: E501
        :type: str
        """
        if initiating_party_id is None:
            raise ValueError("Invalid value for `initiating_party_id`, must not be `None`")  # noqa: E501
        if initiating_party_id is not None and len(initiating_party_id) > 32:
            raise ValueError("Invalid value for `initiating_party_id`, length must be less than or equal to `32`")  # noqa: E501

        self._initiating_party_id = initiating_party_id

    @property
    def requested_execution_date(self):
        """Gets the requested_execution_date of this PaymentSubmissionRequest.  # noqa: E501


        :return: The requested_execution_date of this PaymentSubmissionRequest.  # noqa: E501
        :rtype: date
        """
        return self._requested_execution_date

    @requested_execution_date.setter
    def requested_execution_date(self, requested_execution_date):
        """Sets the requested_execution_date of this PaymentSubmissionRequest.


        :param requested_execution_date: The requested_execution_date of this PaymentSubmissionRequest.  # noqa: E501
        :type: date
        """
        if requested_execution_date is None:
            raise ValueError("Invalid value for `requested_execution_date`, must not be `None`")  # noqa: E501

        self._requested_execution_date = requested_execution_date

    @property
    def debtor_account(self):
        """Gets the debtor_account of this PaymentSubmissionRequest.  # noqa: E501


        :return: The debtor_account of this PaymentSubmissionRequest.  # noqa: E501
        :rtype: PaymentIbanAccount
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this PaymentSubmissionRequest.


        :param debtor_account: The debtor_account of this PaymentSubmissionRequest.  # noqa: E501
        :type: PaymentIbanAccount
        """
        if debtor_account is None:
            raise ValueError("Invalid value for `debtor_account`, must not be `None`")  # noqa: E501

        self._debtor_account = debtor_account

    @property
    def booking_instruction(self):
        """Gets the booking_instruction of this PaymentSubmissionRequest.  # noqa: E501


        :return: The booking_instruction of this PaymentSubmissionRequest.  # noqa: E501
        :rtype: PaymentBookingInstruction
        """
        return self._booking_instruction

    @booking_instruction.setter
    def booking_instruction(self, booking_instruction):
        """Sets the booking_instruction of this PaymentSubmissionRequest.


        :param booking_instruction: The booking_instruction of this PaymentSubmissionRequest.  # noqa: E501
        :type: PaymentBookingInstruction
        """
        if booking_instruction is None:
            raise ValueError("Invalid value for `booking_instruction`, must not be `None`")  # noqa: E501

        self._booking_instruction = booking_instruction

    @property
    def transactions(self):
        """Gets the transactions of this PaymentSubmissionRequest.  # noqa: E501


        :return: The transactions of this PaymentSubmissionRequest.  # noqa: E501
        :rtype: list[PaymentInstructionItem]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this PaymentSubmissionRequest.


        :param transactions: The transactions of this PaymentSubmissionRequest.  # noqa: E501
        :type: list[PaymentInstructionItem]
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentSubmissionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentSubmissionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
