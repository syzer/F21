# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DirectoryUseCaseItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'version': 'str',
        'status': 'str',
        '_from': 'datetime',
        'until': 'datetime',
        'properties': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'status': 'status',
        '_from': 'from',
        'until': 'until',
        'properties': 'properties'
    }

    def __init__(self, name=None, version=None, status=None, _from=None, until=None, properties=None):  # noqa: E501
        """DirectoryUseCaseItem - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._version = None
        self._status = None
        self.__from = None
        self._until = None
        self._properties = None
        self.discriminator = None

        self.name = name
        self.version = version
        self.status = status
        self._from = _from
        if until is not None:
            self.until = until
        if properties is not None:
            self.properties = properties

    @property
    def name(self):
        """Gets the name of this DirectoryUseCaseItem.  # noqa: E501


        :return: The name of this DirectoryUseCaseItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DirectoryUseCaseItem.


        :param name: The name of this DirectoryUseCaseItem.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this DirectoryUseCaseItem.  # noqa: E501


        :return: The version of this DirectoryUseCaseItem.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DirectoryUseCaseItem.


        :param version: The version of this DirectoryUseCaseItem.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def status(self):
        """Gets the status of this DirectoryUseCaseItem.  # noqa: E501


        :return: The status of this DirectoryUseCaseItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DirectoryUseCaseItem.


        :param status: The status of this DirectoryUseCaseItem.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ONBOARDING", "CERTIFIED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def _from(self):
        """Gets the _from of this DirectoryUseCaseItem.  # noqa: E501


        :return: The _from of this DirectoryUseCaseItem.  # noqa: E501
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this DirectoryUseCaseItem.


        :param _from: The _from of this DirectoryUseCaseItem.  # noqa: E501
        :type: datetime
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def until(self):
        """Gets the until of this DirectoryUseCaseItem.  # noqa: E501


        :return: The until of this DirectoryUseCaseItem.  # noqa: E501
        :rtype: datetime
        """
        return self._until

    @until.setter
    def until(self, until):
        """Sets the until of this DirectoryUseCaseItem.


        :param until: The until of this DirectoryUseCaseItem.  # noqa: E501
        :type: datetime
        """

        self._until = until

    @property
    def properties(self):
        """Gets the properties of this DirectoryUseCaseItem.  # noqa: E501


        :return: The properties of this DirectoryUseCaseItem.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this DirectoryUseCaseItem.


        :param properties: The properties of this DirectoryUseCaseItem.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryUseCaseItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryUseCaseItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
