# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConsentAccountItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'iban': 'str',
        'currency': 'str',
        'designation': 'str',
        'allowed_currencies': 'list[str]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'iban': 'iban',
        'currency': 'currency',
        'designation': 'designation',
        'allowed_currencies': 'allowedCurrencies'
    }

    def __init__(self, account_id=None, iban=None, currency=None, designation=None, allowed_currencies=None):  # noqa: E501
        """ConsentAccountItem - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._iban = None
        self._currency = None
        self._designation = None
        self._allowed_currencies = None
        self.discriminator = None

        self.account_id = account_id
        self.iban = iban
        if currency is not None:
            self.currency = currency
        if designation is not None:
            self.designation = designation
        if allowed_currencies is not None:
            self.allowed_currencies = allowed_currencies

    @property
    def account_id(self):
        """Gets the account_id of this ConsentAccountItem.  # noqa: E501


        :return: The account_id of this ConsentAccountItem.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ConsentAccountItem.


        :param account_id: The account_id of this ConsentAccountItem.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def iban(self):
        """Gets the iban of this ConsentAccountItem.  # noqa: E501


        :return: The iban of this ConsentAccountItem.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this ConsentAccountItem.


        :param iban: The iban of this ConsentAccountItem.  # noqa: E501
        :type: str
        """
        if iban is None:
            raise ValueError("Invalid value for `iban`, must not be `None`")  # noqa: E501

        self._iban = iban

    @property
    def currency(self):
        """Gets the currency of this ConsentAccountItem.  # noqa: E501


        :return: The currency of this ConsentAccountItem.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ConsentAccountItem.


        :param currency: The currency of this ConsentAccountItem.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def designation(self):
        """Gets the designation of this ConsentAccountItem.  # noqa: E501


        :return: The designation of this ConsentAccountItem.  # noqa: E501
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this ConsentAccountItem.


        :param designation: The designation of this ConsentAccountItem.  # noqa: E501
        :type: str
        """

        self._designation = designation

    @property
    def allowed_currencies(self):
        """Gets the allowed_currencies of this ConsentAccountItem.  # noqa: E501


        :return: The allowed_currencies of this ConsentAccountItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_currencies

    @allowed_currencies.setter
    def allowed_currencies(self, allowed_currencies):
        """Sets the allowed_currencies of this ConsentAccountItem.


        :param allowed_currencies: The allowed_currencies of this ConsentAccountItem.  # noqa: E501
        :type: list[str]
        """

        self._allowed_currencies = allowed_currencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsentAccountItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsentAccountItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
