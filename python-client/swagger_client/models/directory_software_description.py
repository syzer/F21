# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.directory_image_reference import DirectoryImageReference  # noqa: F401,E501
from swagger_client.models.directory_marketing_description import DirectoryMarketingDescription  # noqa: F401,E501
from swagger_client.models.directory_multisize_image_reference import DirectoryMultisizeImageReference  # noqa: F401,E501
from swagger_client.models.directory_product_name import DirectoryProductName  # noqa: F401,E501
from swagger_client.models.directory_short_description import DirectoryShortDescription  # noqa: F401,E501


class DirectorySoftwareDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_name': 'DirectoryProductName',
        'manufacturer': 'str',
        'category': 'list[str]',
        'product_info_url': 'str',
        'product_logo': 'DirectoryMultisizeImageReference',
        'marketing_image': 'DirectoryImageReference',
        'marketing_description': 'DirectoryMarketingDescription',
        'short_description': 'DirectoryShortDescription'
    }

    attribute_map = {
        'product_name': 'productName',
        'manufacturer': 'manufacturer',
        'category': 'category',
        'product_info_url': 'productInfoUrl',
        'product_logo': 'productLogo',
        'marketing_image': 'marketingImage',
        'marketing_description': 'marketingDescription',
        'short_description': 'shortDescription'
    }

    def __init__(self, product_name=None, manufacturer=None, category=None, product_info_url=None, product_logo=None, marketing_image=None, marketing_description=None, short_description=None):  # noqa: E501
        """DirectorySoftwareDescription - a model defined in Swagger"""  # noqa: E501

        self._product_name = None
        self._manufacturer = None
        self._category = None
        self._product_info_url = None
        self._product_logo = None
        self._marketing_image = None
        self._marketing_description = None
        self._short_description = None
        self.discriminator = None

        self.product_name = product_name
        self.manufacturer = manufacturer
        self.category = category
        self.product_info_url = product_info_url
        self.product_logo = product_logo
        if marketing_image is not None:
            self.marketing_image = marketing_image
        self.marketing_description = marketing_description
        self.short_description = short_description

    @property
    def product_name(self):
        """Gets the product_name of this DirectorySoftwareDescription.  # noqa: E501


        :return: The product_name of this DirectorySoftwareDescription.  # noqa: E501
        :rtype: DirectoryProductName
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this DirectorySoftwareDescription.


        :param product_name: The product_name of this DirectorySoftwareDescription.  # noqa: E501
        :type: DirectoryProductName
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def manufacturer(self):
        """Gets the manufacturer of this DirectorySoftwareDescription.  # noqa: E501


        :return: The manufacturer of this DirectorySoftwareDescription.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this DirectorySoftwareDescription.


        :param manufacturer: The manufacturer of this DirectorySoftwareDescription.  # noqa: E501
        :type: str
        """
        if manufacturer is None:
            raise ValueError("Invalid value for `manufacturer`, must not be `None`")  # noqa: E501
        if manufacturer is not None and len(manufacturer) > 50:
            raise ValueError("Invalid value for `manufacturer`, length must be less than or equal to `50`")  # noqa: E501

        self._manufacturer = manufacturer

    @property
    def category(self):
        """Gets the category of this DirectorySoftwareDescription.  # noqa: E501


        :return: The category of this DirectorySoftwareDescription.  # noqa: E501
        :rtype: list[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DirectorySoftwareDescription.


        :param category: The category of this DirectorySoftwareDescription.  # noqa: E501
        :type: list[str]
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501
        allowed_values = ["ACCOUNTING"]  # noqa: E501
        if not set(category).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `category` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(category) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._category = category

    @property
    def product_info_url(self):
        """Gets the product_info_url of this DirectorySoftwareDescription.  # noqa: E501


        :return: The product_info_url of this DirectorySoftwareDescription.  # noqa: E501
        :rtype: str
        """
        return self._product_info_url

    @product_info_url.setter
    def product_info_url(self, product_info_url):
        """Sets the product_info_url of this DirectorySoftwareDescription.


        :param product_info_url: The product_info_url of this DirectorySoftwareDescription.  # noqa: E501
        :type: str
        """
        if product_info_url is None:
            raise ValueError("Invalid value for `product_info_url`, must not be `None`")  # noqa: E501

        self._product_info_url = product_info_url

    @property
    def product_logo(self):
        """Gets the product_logo of this DirectorySoftwareDescription.  # noqa: E501


        :return: The product_logo of this DirectorySoftwareDescription.  # noqa: E501
        :rtype: DirectoryMultisizeImageReference
        """
        return self._product_logo

    @product_logo.setter
    def product_logo(self, product_logo):
        """Sets the product_logo of this DirectorySoftwareDescription.


        :param product_logo: The product_logo of this DirectorySoftwareDescription.  # noqa: E501
        :type: DirectoryMultisizeImageReference
        """
        if product_logo is None:
            raise ValueError("Invalid value for `product_logo`, must not be `None`")  # noqa: E501

        self._product_logo = product_logo

    @property
    def marketing_image(self):
        """Gets the marketing_image of this DirectorySoftwareDescription.  # noqa: E501


        :return: The marketing_image of this DirectorySoftwareDescription.  # noqa: E501
        :rtype: DirectoryImageReference
        """
        return self._marketing_image

    @marketing_image.setter
    def marketing_image(self, marketing_image):
        """Sets the marketing_image of this DirectorySoftwareDescription.


        :param marketing_image: The marketing_image of this DirectorySoftwareDescription.  # noqa: E501
        :type: DirectoryImageReference
        """

        self._marketing_image = marketing_image

    @property
    def marketing_description(self):
        """Gets the marketing_description of this DirectorySoftwareDescription.  # noqa: E501


        :return: The marketing_description of this DirectorySoftwareDescription.  # noqa: E501
        :rtype: DirectoryMarketingDescription
        """
        return self._marketing_description

    @marketing_description.setter
    def marketing_description(self, marketing_description):
        """Sets the marketing_description of this DirectorySoftwareDescription.


        :param marketing_description: The marketing_description of this DirectorySoftwareDescription.  # noqa: E501
        :type: DirectoryMarketingDescription
        """
        if marketing_description is None:
            raise ValueError("Invalid value for `marketing_description`, must not be `None`")  # noqa: E501

        self._marketing_description = marketing_description

    @property
    def short_description(self):
        """Gets the short_description of this DirectorySoftwareDescription.  # noqa: E501


        :return: The short_description of this DirectorySoftwareDescription.  # noqa: E501
        :rtype: DirectoryShortDescription
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this DirectorySoftwareDescription.


        :param short_description: The short_description of this DirectorySoftwareDescription.  # noqa: E501
        :type: DirectoryShortDescription
        """
        if short_description is None:
            raise ValueError("Invalid value for `short_description`, must not be `None`")  # noqa: E501

        self._short_description = short_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectorySoftwareDescription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectorySoftwareDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
