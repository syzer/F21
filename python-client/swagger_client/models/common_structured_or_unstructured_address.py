# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.common_structured_address import CommonStructuredAddress  # noqa: F401,E501
from swagger_client.models.common_unstructured_address import CommonUnstructuredAddress  # noqa: F401,E501


class CommonStructuredOrUnstructuredAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'structured': 'CommonStructuredAddress',
        'unstructured': 'CommonUnstructuredAddress'
    }

    attribute_map = {
        'structured': 'structured',
        'unstructured': 'unstructured'
    }

    def __init__(self, structured=None, unstructured=None):  # noqa: E501
        """CommonStructuredOrUnstructuredAddress - a model defined in Swagger"""  # noqa: E501

        self._structured = None
        self._unstructured = None
        self.discriminator = None

        if structured is not None:
            self.structured = structured
        if unstructured is not None:
            self.unstructured = unstructured

    @property
    def structured(self):
        """Gets the structured of this CommonStructuredOrUnstructuredAddress.  # noqa: E501


        :return: The structured of this CommonStructuredOrUnstructuredAddress.  # noqa: E501
        :rtype: CommonStructuredAddress
        """
        return self._structured

    @structured.setter
    def structured(self, structured):
        """Sets the structured of this CommonStructuredOrUnstructuredAddress.


        :param structured: The structured of this CommonStructuredOrUnstructuredAddress.  # noqa: E501
        :type: CommonStructuredAddress
        """

        self._structured = structured

    @property
    def unstructured(self):
        """Gets the unstructured of this CommonStructuredOrUnstructuredAddress.  # noqa: E501


        :return: The unstructured of this CommonStructuredOrUnstructuredAddress.  # noqa: E501
        :rtype: CommonUnstructuredAddress
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured):
        """Sets the unstructured of this CommonStructuredOrUnstructuredAddress.


        :param unstructured: The unstructured of this CommonStructuredOrUnstructuredAddress.  # noqa: E501
        :type: CommonUnstructuredAddress
        """

        self._unstructured = unstructured

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonStructuredOrUnstructuredAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonStructuredOrUnstructuredAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
