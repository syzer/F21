# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.payment_instruction_item_status import PaymentInstructionItemStatus  # noqa: F401,E501


class PaymentSubmissionStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_id': 'str',
        'status_code': 'str',
        'transactions': 'list[PaymentInstructionItemStatus]'
    }

    attribute_map = {
        'message_id': 'messageId',
        'status_code': 'statusCode',
        'transactions': 'transactions'
    }

    def __init__(self, message_id=None, status_code=None, transactions=None):  # noqa: E501
        """PaymentSubmissionStatus - a model defined in Swagger"""  # noqa: E501

        self._message_id = None
        self._status_code = None
        self._transactions = None
        self.discriminator = None

        if message_id is not None:
            self.message_id = message_id
        if status_code is not None:
            self.status_code = status_code
        if transactions is not None:
            self.transactions = transactions

    @property
    def message_id(self):
        """Gets the message_id of this PaymentSubmissionStatus.  # noqa: E501


        :return: The message_id of this PaymentSubmissionStatus.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this PaymentSubmissionStatus.


        :param message_id: The message_id of this PaymentSubmissionStatus.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def status_code(self):
        """Gets the status_code of this PaymentSubmissionStatus.  # noqa: E501


        :return: The status_code of this PaymentSubmissionStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this PaymentSubmissionStatus.


        :param status_code: The status_code of this PaymentSubmissionStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCP", "RJCT", "PART"]  # noqa: E501
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"  # noqa: E501
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    @property
    def transactions(self):
        """Gets the transactions of this PaymentSubmissionStatus.  # noqa: E501


        :return: The transactions of this PaymentSubmissionStatus.  # noqa: E501
        :rtype: list[PaymentInstructionItemStatus]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this PaymentSubmissionStatus.


        :param transactions: The transactions of this PaymentSubmissionStatus.  # noqa: E501
        :type: list[PaymentInstructionItemStatus]
        """

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentSubmissionStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentSubmissionStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
