# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.account_transaction_counterparty_account import AccountTransactionCounterpartyAccount  # noqa: F401,E501
from swagger_client.models.account_transaction_counterparty_agent import AccountTransactionCounterpartyAgent  # noqa: F401,E501
from swagger_client.models.common_structured_or_unstructured_address import CommonStructuredOrUnstructuredAddress  # noqa: F401,E501


class AccountTransactionCounterparty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'postal_address': 'CommonStructuredOrUnstructuredAddress',
        'account': 'AccountTransactionCounterpartyAccount',
        'agent': 'AccountTransactionCounterpartyAgent'
    }

    attribute_map = {
        'name': 'name',
        'postal_address': 'postalAddress',
        'account': 'account',
        'agent': 'agent'
    }

    def __init__(self, name=None, postal_address=None, account=None, agent=None):  # noqa: E501
        """AccountTransactionCounterparty - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._postal_address = None
        self._account = None
        self._agent = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if postal_address is not None:
            self.postal_address = postal_address
        if account is not None:
            self.account = account
        if agent is not None:
            self.agent = agent

    @property
    def name(self):
        """Gets the name of this AccountTransactionCounterparty.  # noqa: E501


        :return: The name of this AccountTransactionCounterparty.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountTransactionCounterparty.


        :param name: The name of this AccountTransactionCounterparty.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def postal_address(self):
        """Gets the postal_address of this AccountTransactionCounterparty.  # noqa: E501


        :return: The postal_address of this AccountTransactionCounterparty.  # noqa: E501
        :rtype: CommonStructuredOrUnstructuredAddress
        """
        return self._postal_address

    @postal_address.setter
    def postal_address(self, postal_address):
        """Sets the postal_address of this AccountTransactionCounterparty.


        :param postal_address: The postal_address of this AccountTransactionCounterparty.  # noqa: E501
        :type: CommonStructuredOrUnstructuredAddress
        """

        self._postal_address = postal_address

    @property
    def account(self):
        """Gets the account of this AccountTransactionCounterparty.  # noqa: E501


        :return: The account of this AccountTransactionCounterparty.  # noqa: E501
        :rtype: AccountTransactionCounterpartyAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AccountTransactionCounterparty.


        :param account: The account of this AccountTransactionCounterparty.  # noqa: E501
        :type: AccountTransactionCounterpartyAccount
        """

        self._account = account

    @property
    def agent(self):
        """Gets the agent of this AccountTransactionCounterparty.  # noqa: E501


        :return: The agent of this AccountTransactionCounterparty.  # noqa: E501
        :rtype: AccountTransactionCounterpartyAgent
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this AccountTransactionCounterparty.


        :param agent: The agent of this AccountTransactionCounterparty.  # noqa: E501
        :type: AccountTransactionCounterpartyAgent
        """

        self._agent = agent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountTransactionCounterparty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountTransactionCounterparty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
