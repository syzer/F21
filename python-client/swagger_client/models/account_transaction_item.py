# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.account_transaction_bank_transaction_code import AccountTransactionBankTransactionCode  # noqa: F401,E501
from swagger_client.models.account_transaction_counterparty import AccountTransactionCounterparty  # noqa: F401,E501
from swagger_client.models.account_transaction_instructed_amount import AccountTransactionInstructedAmount  # noqa: F401,E501
from swagger_client.models.account_transaction_item_charges import AccountTransactionItemCharges  # noqa: F401,E501
from swagger_client.models.account_transaction_remittance_reference import AccountTransactionRemittanceReference  # noqa: F401,E501
from swagger_client.models.account_transaction_transaction_type import AccountTransactionTransactionType  # noqa: F401,E501
from swagger_client.models.payment_currency_amount import PaymentCurrencyAmount  # noqa: F401,E501
from swagger_client.models.payment_remittance_information import PaymentRemittanceInformation  # noqa: F401,E501


class AccountTransactionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_id': 'str',
        'transaction_type': 'AccountTransactionTransactionType',
        'end_to_end_id': 'str',
        'bank_transaction_code': 'AccountTransactionBankTransactionCode',
        'amount': 'PaymentCurrencyAmount',
        'instructed_amount': 'AccountTransactionInstructedAmount',
        'total_charges_amount': 'AccountTransactionItemCharges',
        'counterparty': 'AccountTransactionCounterparty',
        'remittance_information': 'PaymentRemittanceInformation',
        'remittance_reference': 'AccountTransactionRemittanceReference',
        'additional_transaction_information': 'str'
    }

    attribute_map = {
        'transaction_id': 'transactionId',
        'transaction_type': 'transactionType',
        'end_to_end_id': 'endToEndId',
        'bank_transaction_code': 'bankTransactionCode',
        'amount': 'amount',
        'instructed_amount': 'instructedAmount',
        'total_charges_amount': 'totalChargesAmount',
        'counterparty': 'counterparty',
        'remittance_information': 'remittanceInformation',
        'remittance_reference': 'remittanceReference',
        'additional_transaction_information': 'additionalTransactionInformation'
    }

    def __init__(self, transaction_id=None, transaction_type=None, end_to_end_id=None, bank_transaction_code=None, amount=None, instructed_amount=None, total_charges_amount=None, counterparty=None, remittance_information=None, remittance_reference=None, additional_transaction_information=None):  # noqa: E501
        """AccountTransactionItem - a model defined in Swagger"""  # noqa: E501

        self._transaction_id = None
        self._transaction_type = None
        self._end_to_end_id = None
        self._bank_transaction_code = None
        self._amount = None
        self._instructed_amount = None
        self._total_charges_amount = None
        self._counterparty = None
        self._remittance_information = None
        self._remittance_reference = None
        self._additional_transaction_information = None
        self.discriminator = None

        self.transaction_id = transaction_id
        self.transaction_type = transaction_type
        if end_to_end_id is not None:
            self.end_to_end_id = end_to_end_id
        if bank_transaction_code is not None:
            self.bank_transaction_code = bank_transaction_code
        self.amount = amount
        if instructed_amount is not None:
            self.instructed_amount = instructed_amount
        if total_charges_amount is not None:
            self.total_charges_amount = total_charges_amount
        if counterparty is not None:
            self.counterparty = counterparty
        if remittance_information is not None:
            self.remittance_information = remittance_information
        if remittance_reference is not None:
            self.remittance_reference = remittance_reference
        if additional_transaction_information is not None:
            self.additional_transaction_information = additional_transaction_information

    @property
    def transaction_id(self):
        """Gets the transaction_id of this AccountTransactionItem.  # noqa: E501


        :return: The transaction_id of this AccountTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this AccountTransactionItem.


        :param transaction_id: The transaction_id of this AccountTransactionItem.  # noqa: E501
        :type: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501

        self._transaction_id = transaction_id

    @property
    def transaction_type(self):
        """Gets the transaction_type of this AccountTransactionItem.  # noqa: E501


        :return: The transaction_type of this AccountTransactionItem.  # noqa: E501
        :rtype: AccountTransactionTransactionType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this AccountTransactionItem.


        :param transaction_type: The transaction_type of this AccountTransactionItem.  # noqa: E501
        :type: AccountTransactionTransactionType
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def end_to_end_id(self):
        """Gets the end_to_end_id of this AccountTransactionItem.  # noqa: E501


        :return: The end_to_end_id of this AccountTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_id

    @end_to_end_id.setter
    def end_to_end_id(self, end_to_end_id):
        """Sets the end_to_end_id of this AccountTransactionItem.


        :param end_to_end_id: The end_to_end_id of this AccountTransactionItem.  # noqa: E501
        :type: str
        """

        self._end_to_end_id = end_to_end_id

    @property
    def bank_transaction_code(self):
        """Gets the bank_transaction_code of this AccountTransactionItem.  # noqa: E501


        :return: The bank_transaction_code of this AccountTransactionItem.  # noqa: E501
        :rtype: AccountTransactionBankTransactionCode
        """
        return self._bank_transaction_code

    @bank_transaction_code.setter
    def bank_transaction_code(self, bank_transaction_code):
        """Sets the bank_transaction_code of this AccountTransactionItem.


        :param bank_transaction_code: The bank_transaction_code of this AccountTransactionItem.  # noqa: E501
        :type: AccountTransactionBankTransactionCode
        """

        self._bank_transaction_code = bank_transaction_code

    @property
    def amount(self):
        """Gets the amount of this AccountTransactionItem.  # noqa: E501


        :return: The amount of this AccountTransactionItem.  # noqa: E501
        :rtype: PaymentCurrencyAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AccountTransactionItem.


        :param amount: The amount of this AccountTransactionItem.  # noqa: E501
        :type: PaymentCurrencyAmount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this AccountTransactionItem.  # noqa: E501


        :return: The instructed_amount of this AccountTransactionItem.  # noqa: E501
        :rtype: AccountTransactionInstructedAmount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this AccountTransactionItem.


        :param instructed_amount: The instructed_amount of this AccountTransactionItem.  # noqa: E501
        :type: AccountTransactionInstructedAmount
        """

        self._instructed_amount = instructed_amount

    @property
    def total_charges_amount(self):
        """Gets the total_charges_amount of this AccountTransactionItem.  # noqa: E501


        :return: The total_charges_amount of this AccountTransactionItem.  # noqa: E501
        :rtype: AccountTransactionItemCharges
        """
        return self._total_charges_amount

    @total_charges_amount.setter
    def total_charges_amount(self, total_charges_amount):
        """Sets the total_charges_amount of this AccountTransactionItem.


        :param total_charges_amount: The total_charges_amount of this AccountTransactionItem.  # noqa: E501
        :type: AccountTransactionItemCharges
        """

        self._total_charges_amount = total_charges_amount

    @property
    def counterparty(self):
        """Gets the counterparty of this AccountTransactionItem.  # noqa: E501


        :return: The counterparty of this AccountTransactionItem.  # noqa: E501
        :rtype: AccountTransactionCounterparty
        """
        return self._counterparty

    @counterparty.setter
    def counterparty(self, counterparty):
        """Sets the counterparty of this AccountTransactionItem.


        :param counterparty: The counterparty of this AccountTransactionItem.  # noqa: E501
        :type: AccountTransactionCounterparty
        """

        self._counterparty = counterparty

    @property
    def remittance_information(self):
        """Gets the remittance_information of this AccountTransactionItem.  # noqa: E501


        :return: The remittance_information of this AccountTransactionItem.  # noqa: E501
        :rtype: PaymentRemittanceInformation
        """
        return self._remittance_information

    @remittance_information.setter
    def remittance_information(self, remittance_information):
        """Sets the remittance_information of this AccountTransactionItem.


        :param remittance_information: The remittance_information of this AccountTransactionItem.  # noqa: E501
        :type: PaymentRemittanceInformation
        """

        self._remittance_information = remittance_information

    @property
    def remittance_reference(self):
        """Gets the remittance_reference of this AccountTransactionItem.  # noqa: E501


        :return: The remittance_reference of this AccountTransactionItem.  # noqa: E501
        :rtype: AccountTransactionRemittanceReference
        """
        return self._remittance_reference

    @remittance_reference.setter
    def remittance_reference(self, remittance_reference):
        """Sets the remittance_reference of this AccountTransactionItem.


        :param remittance_reference: The remittance_reference of this AccountTransactionItem.  # noqa: E501
        :type: AccountTransactionRemittanceReference
        """

        self._remittance_reference = remittance_reference

    @property
    def additional_transaction_information(self):
        """Gets the additional_transaction_information of this AccountTransactionItem.  # noqa: E501


        :return: The additional_transaction_information of this AccountTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._additional_transaction_information

    @additional_transaction_information.setter
    def additional_transaction_information(self, additional_transaction_information):
        """Sets the additional_transaction_information of this AccountTransactionItem.


        :param additional_transaction_information: The additional_transaction_information of this AccountTransactionItem.  # noqa: E501
        :type: str
        """

        self._additional_transaction_information = additional_transaction_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountTransactionItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountTransactionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
