# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.account_balance_item_links import AccountBalanceItemLinks  # noqa: F401,E501
from swagger_client.models.balance_currency_amount import BalanceCurrencyAmount  # noqa: F401,E501


class AccountBalanceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'balance_type': 'str',
        'balance': 'BalanceCurrencyAmount',
        'links': 'AccountBalanceItemLinks'
    }

    attribute_map = {
        '_date': 'date',
        'balance_type': 'balanceType',
        'balance': 'balance',
        'links': '_links'
    }

    def __init__(self, _date=None, balance_type=None, balance=None, links=None):  # noqa: E501
        """AccountBalanceItem - a model defined in Swagger"""  # noqa: E501

        self.__date = None
        self._balance_type = None
        self._balance = None
        self._links = None
        self.discriminator = None

        self._date = _date
        self.balance_type = balance_type
        self.balance = balance
        if links is not None:
            self.links = links

    @property
    def _date(self):
        """Gets the _date of this AccountBalanceItem.  # noqa: E501


        :return: The _date of this AccountBalanceItem.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AccountBalanceItem.


        :param _date: The _date of this AccountBalanceItem.  # noqa: E501
        :type: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def balance_type(self):
        """Gets the balance_type of this AccountBalanceItem.  # noqa: E501


        :return: The balance_type of this AccountBalanceItem.  # noqa: E501
        :rtype: str
        """
        return self._balance_type

    @balance_type.setter
    def balance_type(self, balance_type):
        """Sets the balance_type of this AccountBalanceItem.


        :param balance_type: The balance_type of this AccountBalanceItem.  # noqa: E501
        :type: str
        """
        if balance_type is None:
            raise ValueError("Invalid value for `balance_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ITBD", "CLBD"]  # noqa: E501
        if balance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `balance_type` ({0}), must be one of {1}"  # noqa: E501
                .format(balance_type, allowed_values)
            )

        self._balance_type = balance_type

    @property
    def balance(self):
        """Gets the balance of this AccountBalanceItem.  # noqa: E501


        :return: The balance of this AccountBalanceItem.  # noqa: E501
        :rtype: BalanceCurrencyAmount
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AccountBalanceItem.


        :param balance: The balance of this AccountBalanceItem.  # noqa: E501
        :type: BalanceCurrencyAmount
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def links(self):
        """Gets the links of this AccountBalanceItem.  # noqa: E501


        :return: The links of this AccountBalanceItem.  # noqa: E501
        :rtype: AccountBalanceItemLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AccountBalanceItem.


        :param links: The links of this AccountBalanceItem.  # noqa: E501
        :type: AccountBalanceItemLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountBalanceItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountBalanceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
