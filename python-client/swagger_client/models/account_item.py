# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.account_item_links import AccountItemLinks  # noqa: F401,E501
from swagger_client.models.payment_iban_account import PaymentIbanAccount  # noqa: F401,E501


class AccountItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account': 'PaymentIbanAccount',
        'currency': 'str',
        'designation': 'str',
        'links': 'AccountItemLinks'
    }

    attribute_map = {
        'id': 'id',
        'account': 'account',
        'currency': 'currency',
        'designation': 'designation',
        'links': '_links'
    }

    def __init__(self, id=None, account=None, currency=None, designation=None, links=None):  # noqa: E501
        """AccountItem - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._account = None
        self._currency = None
        self._designation = None
        self._links = None
        self.discriminator = None

        self.id = id
        self.account = account
        self.currency = currency
        self.designation = designation
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this AccountItem.  # noqa: E501


        :return: The id of this AccountItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountItem.


        :param id: The id of this AccountItem.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def account(self):
        """Gets the account of this AccountItem.  # noqa: E501


        :return: The account of this AccountItem.  # noqa: E501
        :rtype: PaymentIbanAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AccountItem.


        :param account: The account of this AccountItem.  # noqa: E501
        :type: PaymentIbanAccount
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def currency(self):
        """Gets the currency of this AccountItem.  # noqa: E501


        :return: The currency of this AccountItem.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountItem.


        :param currency: The currency of this AccountItem.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def designation(self):
        """Gets the designation of this AccountItem.  # noqa: E501


        :return: The designation of this AccountItem.  # noqa: E501
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this AccountItem.


        :param designation: The designation of this AccountItem.  # noqa: E501
        :type: str
        """
        if designation is None:
            raise ValueError("Invalid value for `designation`, must not be `None`")  # noqa: E501
        if designation is not None and len(designation) > 140:
            raise ValueError("Invalid value for `designation`, length must be less than or equal to `140`")  # noqa: E501

        self._designation = designation

    @property
    def links(self):
        """Gets the links of this AccountItem.  # noqa: E501


        :return: The links of this AccountItem.  # noqa: E501
        :rtype: AccountItemLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AccountItem.


        :param links: The links of this AccountItem.  # noqa: E501
        :type: AccountItemLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
