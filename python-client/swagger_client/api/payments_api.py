# coding: utf-8

"""
    Swiss Corporate API

    This is the release candidate version of the \"Swiss Corporate API\" specification.   # noqa: E501

    OpenAPI spec version: 1.0.0.2-SNAPSHOT
    Contact: swisscorpapi@six-group.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PaymentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def retrieve_payment_submission(self, authorization, submission_id, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, **kwargs):  # noqa: E501
        """Retrieve a payment submission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_payment_submission(authorization, submission_id, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Bearer followed by a base64 encoded OAuth access token (required)
        :param str submission_id: id of payment submission (required)
        :param str x_cor_api_target_id: ID that identifies the provider (e.g., a financial institution). (SCOPE: SIX) (required)
        :param str x_cor_api_client_id: ID of the client forwarded to the provider. (SCOPE: FI) (required)
        :param str x_correlation_id: Unique ID (defined by the caller) which will be reflected back in the response. (required)
        :param str user_agent: Name and version of the of the Client software (required)
        :return: PaymentSubmissionRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_payment_submission_with_http_info(authorization, submission_id, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_payment_submission_with_http_info(authorization, submission_id, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, **kwargs)  # noqa: E501
            return data

    def retrieve_payment_submission_with_http_info(self, authorization, submission_id, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, **kwargs):  # noqa: E501
        """Retrieve a payment submission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_payment_submission_with_http_info(authorization, submission_id, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Bearer followed by a base64 encoded OAuth access token (required)
        :param str submission_id: id of payment submission (required)
        :param str x_cor_api_target_id: ID that identifies the provider (e.g., a financial institution). (SCOPE: SIX) (required)
        :param str x_cor_api_client_id: ID of the client forwarded to the provider. (SCOPE: FI) (required)
        :param str x_correlation_id: Unique ID (defined by the caller) which will be reflected back in the response. (required)
        :param str user_agent: Name and version of the of the Client software (required)
        :return: PaymentSubmissionRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'submission_id', 'x_cor_api_target_id', 'x_cor_api_client_id', 'x_correlation_id', 'user_agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_payment_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `retrieve_payment_submission`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `retrieve_payment_submission`")  # noqa: E501
        # verify the required parameter 'x_cor_api_target_id' is set
        if ('x_cor_api_target_id' not in params or
                params['x_cor_api_target_id'] is None):
            raise ValueError("Missing the required parameter `x_cor_api_target_id` when calling `retrieve_payment_submission`")  # noqa: E501
        # verify the required parameter 'x_cor_api_client_id' is set
        if ('x_cor_api_client_id' not in params or
                params['x_cor_api_client_id'] is None):
            raise ValueError("Missing the required parameter `x_cor_api_client_id` when calling `retrieve_payment_submission`")  # noqa: E501
        # verify the required parameter 'x_correlation_id' is set
        if ('x_correlation_id' not in params or
                params['x_correlation_id'] is None):
            raise ValueError("Missing the required parameter `x_correlation_id` when calling `retrieve_payment_submission`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `retrieve_payment_submission`")  # noqa: E501

        if ('submission_id' in params and
                len(params['submission_id']) > 30):
            raise ValueError("Invalid value for parameter `submission_id` when calling `retrieve_payment_submission`, length must be less than or equal to `30`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_cor_api_target_id' in params:
            header_params['X-CorAPI-Target-ID'] = params['x_cor_api_target_id']  # noqa: E501
        if 'x_cor_api_client_id' in params:
            header_params['X-CorAPI-Client-ID'] = params['x_cor_api_client_id']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-Correlation-ID'] = params['x_correlation_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments/{submissionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentSubmissionRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_payment_submission_status(self, authorization, submission_id, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, **kwargs):  # noqa: E501
        """Retrieve payment submission status information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_payment_submission_status(authorization, submission_id, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Bearer followed by a base64 encoded OAuth access token (required)
        :param str submission_id: id of payment submission (required)
        :param str x_cor_api_target_id: ID that identifies the provider (e.g., a financial institution). (SCOPE: SIX) (required)
        :param str x_cor_api_client_id: ID of the client forwarded to the provider. (SCOPE: FI) (required)
        :param str x_correlation_id: Unique ID (defined by the caller) which will be reflected back in the response. (required)
        :param str user_agent: Name and version of the of the Client software (required)
        :return: PaymentSubmissionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_payment_submission_status_with_http_info(authorization, submission_id, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_payment_submission_status_with_http_info(authorization, submission_id, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, **kwargs)  # noqa: E501
            return data

    def retrieve_payment_submission_status_with_http_info(self, authorization, submission_id, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, **kwargs):  # noqa: E501
        """Retrieve payment submission status information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_payment_submission_status_with_http_info(authorization, submission_id, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Bearer followed by a base64 encoded OAuth access token (required)
        :param str submission_id: id of payment submission (required)
        :param str x_cor_api_target_id: ID that identifies the provider (e.g., a financial institution). (SCOPE: SIX) (required)
        :param str x_cor_api_client_id: ID of the client forwarded to the provider. (SCOPE: FI) (required)
        :param str x_correlation_id: Unique ID (defined by the caller) which will be reflected back in the response. (required)
        :param str user_agent: Name and version of the of the Client software (required)
        :return: PaymentSubmissionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'submission_id', 'x_cor_api_target_id', 'x_cor_api_client_id', 'x_correlation_id', 'user_agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_payment_submission_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `retrieve_payment_submission_status`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `retrieve_payment_submission_status`")  # noqa: E501
        # verify the required parameter 'x_cor_api_target_id' is set
        if ('x_cor_api_target_id' not in params or
                params['x_cor_api_target_id'] is None):
            raise ValueError("Missing the required parameter `x_cor_api_target_id` when calling `retrieve_payment_submission_status`")  # noqa: E501
        # verify the required parameter 'x_cor_api_client_id' is set
        if ('x_cor_api_client_id' not in params or
                params['x_cor_api_client_id'] is None):
            raise ValueError("Missing the required parameter `x_cor_api_client_id` when calling `retrieve_payment_submission_status`")  # noqa: E501
        # verify the required parameter 'x_correlation_id' is set
        if ('x_correlation_id' not in params or
                params['x_correlation_id'] is None):
            raise ValueError("Missing the required parameter `x_correlation_id` when calling `retrieve_payment_submission_status`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `retrieve_payment_submission_status`")  # noqa: E501

        if ('submission_id' in params and
                len(params['submission_id']) > 30):
            raise ValueError("Invalid value for parameter `submission_id` when calling `retrieve_payment_submission_status`, length must be less than or equal to `30`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_cor_api_target_id' in params:
            header_params['X-CorAPI-Target-ID'] = params['x_cor_api_target_id']  # noqa: E501
        if 'x_cor_api_client_id' in params:
            header_params['X-CorAPI-Client-ID'] = params['x_cor_api_client_id']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-Correlation-ID'] = params['x_correlation_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments/{submissionId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentSubmissionStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_payment_instructions(self, authorization, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, x_psu_ip_address, x_psu_user_agent, body, **kwargs):  # noqa: E501
        """Submit payment instructions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_payment_instructions(authorization, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, x_psu_ip_address, x_psu_user_agent, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Bearer followed by a base64 encoded OAuth access token (required)
        :param str x_cor_api_target_id: ID that identifies the provider (e.g., a financial institution). (SCOPE: SIX) (required)
        :param str x_cor_api_client_id: ID of the client forwarded to the provider. (SCOPE: FI) (required)
        :param str x_correlation_id: Unique ID (defined by the caller) which will be reflected back in the response. (required)
        :param str user_agent: Name and version of the of the Client software (required)
        :param str x_psu_ip_address: IP address of the user initiating the operation (required)
        :param str x_psu_user_agent: User agent of the user initiating the operation (required)
        :param PaymentSubmissionRequest body: Payment instruction details as defined by data model.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_payment_instructions_with_http_info(authorization, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, x_psu_ip_address, x_psu_user_agent, body, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_payment_instructions_with_http_info(authorization, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, x_psu_ip_address, x_psu_user_agent, body, **kwargs)  # noqa: E501
            return data

    def submit_payment_instructions_with_http_info(self, authorization, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, x_psu_ip_address, x_psu_user_agent, body, **kwargs):  # noqa: E501
        """Submit payment instructions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_payment_instructions_with_http_info(authorization, x_cor_api_target_id, x_cor_api_client_id, x_correlation_id, user_agent, x_psu_ip_address, x_psu_user_agent, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Bearer followed by a base64 encoded OAuth access token (required)
        :param str x_cor_api_target_id: ID that identifies the provider (e.g., a financial institution). (SCOPE: SIX) (required)
        :param str x_cor_api_client_id: ID of the client forwarded to the provider. (SCOPE: FI) (required)
        :param str x_correlation_id: Unique ID (defined by the caller) which will be reflected back in the response. (required)
        :param str user_agent: Name and version of the of the Client software (required)
        :param str x_psu_ip_address: IP address of the user initiating the operation (required)
        :param str x_psu_user_agent: User agent of the user initiating the operation (required)
        :param PaymentSubmissionRequest body: Payment instruction details as defined by data model.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_cor_api_target_id', 'x_cor_api_client_id', 'x_correlation_id', 'user_agent', 'x_psu_ip_address', 'x_psu_user_agent', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_payment_instructions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `submit_payment_instructions`")  # noqa: E501
        # verify the required parameter 'x_cor_api_target_id' is set
        if ('x_cor_api_target_id' not in params or
                params['x_cor_api_target_id'] is None):
            raise ValueError("Missing the required parameter `x_cor_api_target_id` when calling `submit_payment_instructions`")  # noqa: E501
        # verify the required parameter 'x_cor_api_client_id' is set
        if ('x_cor_api_client_id' not in params or
                params['x_cor_api_client_id'] is None):
            raise ValueError("Missing the required parameter `x_cor_api_client_id` when calling `submit_payment_instructions`")  # noqa: E501
        # verify the required parameter 'x_correlation_id' is set
        if ('x_correlation_id' not in params or
                params['x_correlation_id'] is None):
            raise ValueError("Missing the required parameter `x_correlation_id` when calling `submit_payment_instructions`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `submit_payment_instructions`")  # noqa: E501
        # verify the required parameter 'x_psu_ip_address' is set
        if ('x_psu_ip_address' not in params or
                params['x_psu_ip_address'] is None):
            raise ValueError("Missing the required parameter `x_psu_ip_address` when calling `submit_payment_instructions`")  # noqa: E501
        # verify the required parameter 'x_psu_user_agent' is set
        if ('x_psu_user_agent' not in params or
                params['x_psu_user_agent'] is None):
            raise ValueError("Missing the required parameter `x_psu_user_agent` when calling `submit_payment_instructions`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_payment_instructions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_cor_api_target_id' in params:
            header_params['X-CorAPI-Target-ID'] = params['x_cor_api_target_id']  # noqa: E501
        if 'x_cor_api_client_id' in params:
            header_params['X-CorAPI-Client-ID'] = params['x_cor_api_client_id']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-Correlation-ID'] = params['x_correlation_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'x_psu_ip_address' in params:
            header_params['X-PSU-IP-Address'] = params['x_psu_ip_address']  # noqa: E501
        if 'x_psu_user_agent' in params:
            header_params['X-PSU-User-Agent'] = params['x_psu_user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
