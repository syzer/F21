/**
 * Swiss Corporate API
 * This is the release candidate version of the \"Swiss Corporate API\" specification. 
 *
 * OpenAPI spec version: 1.0.0.2-SNAPSHOT
 * Contact: swisscorpapi@six-group.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CommonErrorResponse', 'model/DirectoryClientItem', 'model/DirectoryProviderItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CommonErrorResponse'), require('../model/DirectoryClientItem'), require('../model/DirectoryProviderItem'));
  } else {
    // Browser globals (root is window)
    if (!root.SwissCorporateApi) {
      root.SwissCorporateApi = {};
    }
    root.SwissCorporateApi.DirectoryApi = factory(root.SwissCorporateApi.ApiClient, root.SwissCorporateApi.CommonErrorResponse, root.SwissCorporateApi.DirectoryClientItem, root.SwissCorporateApi.DirectoryProviderItem);
  }
}(this, function(ApiClient, CommonErrorResponse, DirectoryClientItem, DirectoryProviderItem) {
  'use strict';

  /**
   * Directory service.
   * @module api/DirectoryApi
   * @version 1.0.0.2-SNAPSHOT
   */

  /**
   * Constructs a new DirectoryApi. 
   * @alias module:api/DirectoryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the retrieveClientDetail operation.
     * @callback module:api/DirectoryApi~retrieveClientDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DirectoryClientItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the information for a registered client (e.g. third party provider)
     * Returns information regarding software and supported use cases of a client. (SCOPE: SIX) 
     * @param {String} clientId id of the client
     * @param {String} xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response.
     * @param {String} userAgent Name and version of the of the Client software
     * @param {module:api/DirectoryApi~retrieveClientDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DirectoryClientItem}
     */
    this.retrieveClientDetail = function(clientId, xCorrelationID, userAgent, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling retrieveClientDetail");
      }

      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling retrieveClientDetail");
      }

      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling retrieveClientDetail");
      }


      var pathParams = {
        'clientId': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Correlation-ID': xCorrelationID,
        'User-Agent': userAgent
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DirectoryClientItem;

      return this.apiClient.callApi(
        '/directory/clients/{clientId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveClients operation.
     * @callback module:api/DirectoryApi~retrieveClientsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DirectoryClientItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all registered clients (e.g., third party providers)
     * Returns a list of clients with information regarding software and supported use cases. (SCOPE: SIX) 
     * @param {String} xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response.
     * @param {String} userAgent Name and version of the of the Client software
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status status&#x3D;ACTIVE returns only active clients (default to ACTIVE)
     * @param {module:api/DirectoryApi~retrieveClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DirectoryClientItem>}
     */
    this.retrieveClients = function(xCorrelationID, userAgent, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling retrieveClients");
      }

      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling retrieveClients");
      }


      var pathParams = {
      };
      var queryParams = {
        'status': opts['status'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Correlation-ID': xCorrelationID,
        'User-Agent': userAgent
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DirectoryClientItem];

      return this.apiClient.callApi(
        '/directory/clients', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveProviderDetail operation.
     * @callback module:api/DirectoryApi~retrieveProviderDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DirectoryProviderItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the informatoin for a registered provider (e.g., financial institutions)
     * Returns information regarding software and supported use cases of a provider. (SCOPE: SIX) 
     * @param {String} providerId id of the provider
     * @param {String} xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response.
     * @param {String} userAgent Name and version of the of the Client software
     * @param {module:api/DirectoryApi~retrieveProviderDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DirectoryProviderItem}
     */
    this.retrieveProviderDetail = function(providerId, xCorrelationID, userAgent, callback) {
      var postBody = null;

      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling retrieveProviderDetail");
      }

      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling retrieveProviderDetail");
      }

      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling retrieveProviderDetail");
      }


      var pathParams = {
        'providerId': providerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Correlation-ID': xCorrelationID,
        'User-Agent': userAgent
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DirectoryProviderItem;

      return this.apiClient.callApi(
        '/directory/providers/{providerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveProviders operation.
     * @callback module:api/DirectoryApi~retrieveProvidersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DirectoryProviderItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all registered providers (e.g., financial institutions)
     * Returns a list of providers with information regarding software and supported use cases. (SCOPE: SIX) 
     * @param {String} xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response.
     * @param {String} userAgent Name and version of the of the Client software
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status status&#x3D;ACTIVE returns only active clients (default to ACTIVE)
     * @param {module:api/DirectoryApi~retrieveProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DirectoryProviderItem>}
     */
    this.retrieveProviders = function(xCorrelationID, userAgent, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling retrieveProviders");
      }

      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling retrieveProviders");
      }


      var pathParams = {
      };
      var queryParams = {
        'status': opts['status'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Correlation-ID': xCorrelationID,
        'User-Agent': userAgent
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DirectoryProviderItem];

      return this.apiClient.callApi(
        '/directory/providers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
