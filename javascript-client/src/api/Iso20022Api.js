/**
 * Swiss Corporate API
 * This is the release candidate version of the \"Swiss Corporate API\" specification. 
 *
 * OpenAPI spec version: 1.0.0.2-SNAPSHOT
 * Contact: swisscorpapi@six-group.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CommonErrorResponse', 'model/Iso20022ReportReference'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CommonErrorResponse'), require('../model/Iso20022ReportReference'));
  } else {
    // Browser globals (root is window)
    if (!root.SwissCorporateApi) {
      root.SwissCorporateApi = {};
    }
    root.SwissCorporateApi.Iso20022Api = factory(root.SwissCorporateApi.ApiClient, root.SwissCorporateApi.CommonErrorResponse, root.SwissCorporateApi.Iso20022ReportReference);
  }
}(this, function(ApiClient, CommonErrorResponse, Iso20022ReportReference) {
  'use strict';

  /**
   * Iso20022 service.
   * @module api/Iso20022Api
   * @version 1.0.0.2-SNAPSHOT
   */

  /**
   * Constructs a new Iso20022Api. 
   * @alias module:api/Iso20022Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the retrieveIso20022AccountStatement operation.
     * @callback module:api/Iso20022Api~retrieveIso20022AccountStatementCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the designated ISO20022 XML CAMT document.
     * @param {String} authorization Bearer followed by a base64 encoded OAuth access token
     * @param {String} reportId id of report
     * @param {String} xCorAPITargetID ID that identifies the provider (e.g., a financial institution). (SCOPE: SIX)
     * @param {String} xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI)
     * @param {String} xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response.
     * @param {String} userAgent Name and version of the of the Client software
     * @param {module:api/Iso20022Api~retrieveIso20022AccountStatementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.retrieveIso20022AccountStatement = function(authorization, reportId, xCorAPITargetID, xCorAPIClientID, xCorrelationID, userAgent, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling retrieveIso20022AccountStatement");
      }

      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling retrieveIso20022AccountStatement");
      }

      // verify the required parameter 'xCorAPITargetID' is set
      if (xCorAPITargetID === undefined || xCorAPITargetID === null) {
        throw new Error("Missing the required parameter 'xCorAPITargetID' when calling retrieveIso20022AccountStatement");
      }

      // verify the required parameter 'xCorAPIClientID' is set
      if (xCorAPIClientID === undefined || xCorAPIClientID === null) {
        throw new Error("Missing the required parameter 'xCorAPIClientID' when calling retrieveIso20022AccountStatement");
      }

      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling retrieveIso20022AccountStatement");
      }

      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling retrieveIso20022AccountStatement");
      }


      var pathParams = {
        'reportId': reportId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'X-CorAPI-Target-ID': xCorAPITargetID,
        'X-CorAPI-Client-ID': xCorAPIClientID,
        'X-Correlation-ID': xCorrelationID,
        'User-Agent': userAgent
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml'];
      var returnType = File;

      return this.apiClient.callApi(
        '/iso20022/statements/{reportId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveIso20022AccountStatementIds operation.
     * @callback module:api/Iso20022Api~retrieveIso20022AccountStatementIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Iso20022ReportReference>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of resource links to account statements (CAMT.053)
     * Retrieve resources links to available account statements. The returned account statements must conform to the XML Schema and Implementation Guidelines defined by Swiss Payment Standards; see: https://www.six-interbank-clearing.com/en/home/standardization/iso-payments/customer-bank/implementation-guidelines.html 
     * @param {String} authorization Bearer followed by a base64 encoded OAuth access token
     * @param {String} xCorAPITargetID ID that identifies the provider (e.g., a financial institution). (SCOPE: SIX)
     * @param {String} xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI)
     * @param {String} xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response.
     * @param {String} userAgent Name and version of the of the Client software
     * @param {module:api/Iso20022Api~retrieveIso20022AccountStatementIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Iso20022ReportReference>}
     */
    this.retrieveIso20022AccountStatementIds = function(authorization, xCorAPITargetID, xCorAPIClientID, xCorrelationID, userAgent, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling retrieveIso20022AccountStatementIds");
      }

      // verify the required parameter 'xCorAPITargetID' is set
      if (xCorAPITargetID === undefined || xCorAPITargetID === null) {
        throw new Error("Missing the required parameter 'xCorAPITargetID' when calling retrieveIso20022AccountStatementIds");
      }

      // verify the required parameter 'xCorAPIClientID' is set
      if (xCorAPIClientID === undefined || xCorAPIClientID === null) {
        throw new Error("Missing the required parameter 'xCorAPIClientID' when calling retrieveIso20022AccountStatementIds");
      }

      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling retrieveIso20022AccountStatementIds");
      }

      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling retrieveIso20022AccountStatementIds");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'X-CorAPI-Target-ID': xCorAPITargetID,
        'X-CorAPI-Client-ID': xCorAPIClientID,
        'X-Correlation-ID': xCorrelationID,
        'User-Agent': userAgent
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Iso20022ReportReference];

      return this.apiClient.callApi(
        '/iso20022/statements', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveIso20022PaymentInstruction operation.
     * @callback module:api/Iso20022Api~retrieveIso20022PaymentInstructionCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the submitted ISO20022 XML PAIN.001 message.
     * @param {String} authorization Bearer followed by a base64 encoded OAuth access token
     * @param {String} submissionId id of payment submission
     * @param {String} xCorAPITargetID ID that identifies the provider (e.g., a financial institution). (SCOPE: SIX)
     * @param {String} xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI)
     * @param {String} xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response.
     * @param {String} userAgent Name and version of the of the Client software
     * @param {module:api/Iso20022Api~retrieveIso20022PaymentInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.retrieveIso20022PaymentInstruction = function(authorization, submissionId, xCorAPITargetID, xCorAPIClientID, xCorrelationID, userAgent, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling retrieveIso20022PaymentInstruction");
      }

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling retrieveIso20022PaymentInstruction");
      }

      // verify the required parameter 'xCorAPITargetID' is set
      if (xCorAPITargetID === undefined || xCorAPITargetID === null) {
        throw new Error("Missing the required parameter 'xCorAPITargetID' when calling retrieveIso20022PaymentInstruction");
      }

      // verify the required parameter 'xCorAPIClientID' is set
      if (xCorAPIClientID === undefined || xCorAPIClientID === null) {
        throw new Error("Missing the required parameter 'xCorAPIClientID' when calling retrieveIso20022PaymentInstruction");
      }

      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling retrieveIso20022PaymentInstruction");
      }

      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling retrieveIso20022PaymentInstruction");
      }


      var pathParams = {
        'submissionId': submissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'X-CorAPI-Target-ID': xCorAPITargetID,
        'X-CorAPI-Client-ID': xCorAPIClientID,
        'X-Correlation-ID': xCorrelationID,
        'User-Agent': userAgent
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml'];
      var returnType = File;

      return this.apiClient.callApi(
        '/iso20022/payments/{submissionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveIso20022PaymentInstructionStatusReport operation.
     * @callback module:api/Iso20022Api~retrieveIso20022PaymentInstructionStatusReportCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve ISO20022 XML status report (PAIN.002) of a payment instruction
     * Retrieve the XML ISO20022 pain.002 status report. The returned status report must conform to the XML Schema and Implementation Guidelines defined by Swiss Payment Standards; see: https://www.six-interbank-clearing.com/en/home/standardization/iso-payments/customer-bank/implementation-guidelines.html 
     * @param {String} authorization Bearer followed by a base64 encoded OAuth access token
     * @param {String} submissionId id of payment submission
     * @param {String} xCorAPITargetID ID that identifies the provider (e.g., a financial institution). (SCOPE: SIX)
     * @param {String} xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI)
     * @param {String} xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response.
     * @param {String} userAgent Name and version of the of the Client software
     * @param {module:api/Iso20022Api~retrieveIso20022PaymentInstructionStatusReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.retrieveIso20022PaymentInstructionStatusReport = function(authorization, submissionId, xCorAPITargetID, xCorAPIClientID, xCorrelationID, userAgent, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling retrieveIso20022PaymentInstructionStatusReport");
      }

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling retrieveIso20022PaymentInstructionStatusReport");
      }

      // verify the required parameter 'xCorAPITargetID' is set
      if (xCorAPITargetID === undefined || xCorAPITargetID === null) {
        throw new Error("Missing the required parameter 'xCorAPITargetID' when calling retrieveIso20022PaymentInstructionStatusReport");
      }

      // verify the required parameter 'xCorAPIClientID' is set
      if (xCorAPIClientID === undefined || xCorAPIClientID === null) {
        throw new Error("Missing the required parameter 'xCorAPIClientID' when calling retrieveIso20022PaymentInstructionStatusReport");
      }

      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling retrieveIso20022PaymentInstructionStatusReport");
      }

      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling retrieveIso20022PaymentInstructionStatusReport");
      }


      var pathParams = {
        'submissionId': submissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'X-CorAPI-Target-ID': xCorAPITargetID,
        'X-CorAPI-Client-ID': xCorAPIClientID,
        'X-Correlation-ID': xCorrelationID,
        'User-Agent': userAgent
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml'];
      var returnType = File;

      return this.apiClient.callApi(
        '/iso20022/payments/{submissionId}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the submitIso20022PaymentInstruction operation.
     * @callback module:api/Iso20022Api~submitIso20022PaymentInstructionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit an ISO20022 XML payment instruction (PAIN.001)
     * Submit an ISO20022 XML PAIN.001 payment instruction. The submitted payment instruction must conform to the XML Schema and Implementation Guidelines defined by Swiss Payment Standards; see: https://www.six-interbank-clearing.com/en/home/standardization/iso-payments/customer-bank/implementation-guidelines.html 
     * @param {String} authorization Bearer followed by a base64 encoded OAuth access token
     * @param {String} xCorAPITargetID ID that identifies the provider (e.g., a financial institution). (SCOPE: SIX)
     * @param {String} xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI)
     * @param {String} xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response.
     * @param {String} userAgent Name and version of the of the Client software
     * @param {String} xPSUIPAddress IP address of the user initiating the operation
     * @param {String} xPSUUserAgent User agent of the user initiating the operation
     * @param {String} body Payment instruction details as defined by data model. 
     * @param {module:api/Iso20022Api~submitIso20022PaymentInstructionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.submitIso20022PaymentInstruction = function(authorization, xCorAPITargetID, xCorAPIClientID, xCorrelationID, userAgent, xPSUIPAddress, xPSUUserAgent, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling submitIso20022PaymentInstruction");
      }

      // verify the required parameter 'xCorAPITargetID' is set
      if (xCorAPITargetID === undefined || xCorAPITargetID === null) {
        throw new Error("Missing the required parameter 'xCorAPITargetID' when calling submitIso20022PaymentInstruction");
      }

      // verify the required parameter 'xCorAPIClientID' is set
      if (xCorAPIClientID === undefined || xCorAPIClientID === null) {
        throw new Error("Missing the required parameter 'xCorAPIClientID' when calling submitIso20022PaymentInstruction");
      }

      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling submitIso20022PaymentInstruction");
      }

      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling submitIso20022PaymentInstruction");
      }

      // verify the required parameter 'xPSUIPAddress' is set
      if (xPSUIPAddress === undefined || xPSUIPAddress === null) {
        throw new Error("Missing the required parameter 'xPSUIPAddress' when calling submitIso20022PaymentInstruction");
      }

      // verify the required parameter 'xPSUUserAgent' is set
      if (xPSUUserAgent === undefined || xPSUUserAgent === null) {
        throw new Error("Missing the required parameter 'xPSUUserAgent' when calling submitIso20022PaymentInstruction");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling submitIso20022PaymentInstruction");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'X-CorAPI-Target-ID': xCorAPITargetID,
        'X-CorAPI-Client-ID': xCorAPIClientID,
        'X-Correlation-ID': xCorrelationID,
        'User-Agent': userAgent,
        'X-PSU-IP-Address': xPSUIPAddress,
        'X-PSU-User-Agent': xPSUUserAgent
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/iso20022/payments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
