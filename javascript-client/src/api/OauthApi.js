/**
 * Swiss Corporate API
 * This is the release candidate version of the \"Swiss Corporate API\" specification. 
 *
 * OpenAPI spec version: 1.0.0.2-SNAPSHOT
 * Contact: swisscorpapi@six-group.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CommonErrorResponse', 'model/OauthTokenResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CommonErrorResponse'), require('../model/OauthTokenResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.SwissCorporateApi) {
      root.SwissCorporateApi = {};
    }
    root.SwissCorporateApi.OauthApi = factory(root.SwissCorporateApi.ApiClient, root.SwissCorporateApi.CommonErrorResponse, root.SwissCorporateApi.OauthTokenResponse);
  }
}(this, function(ApiClient, CommonErrorResponse, OauthTokenResponse) {
  'use strict';

  /**
   * Oauth service.
   * @module api/OauthApi
   * @version 1.0.0.2-SNAPSHOT
   */

  /**
   * Constructs a new OauthApi. 
   * @alias module:api/OauthApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the oauthToken operation.
     * @callback module:api/OauthApi~oauthTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OauthTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the OAuth access and refresh token
     * Returns the OAuth access and refresh token for the specified client and target 
     * @param {module:model/String} grantType either authorization_code or refresh_token
     * @param {String} clientId client id
     * @param {String} xCorAPITargetID ID that identifies the provider (e.g., a financial institution). (SCOPE: SIX)
     * @param {String} xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI)
     * @param {String} xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response.
     * @param {String} userAgent Name and version of the of the Client software
     * @param {String} xPSUIPAddress IP address of the user initiating the operation
     * @param {String} xPSUUserAgent User agent of the user initiating the operation
     * @param {Object} opts Optional parameters
     * @param {String} opts.code authorization code if applicable
     * @param {String} opts.refreshToken refresh token if applicable
     * @param {String} opts.redirectUri original redirect uri if applicable
     * @param {module:api/OauthApi~oauthTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OauthTokenResponse}
     */
    this.oauthToken = function(grantType, clientId, xCorAPITargetID, xCorAPIClientID, xCorrelationID, userAgent, xPSUIPAddress, xPSUUserAgent, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'grantType' is set
      if (grantType === undefined || grantType === null) {
        throw new Error("Missing the required parameter 'grantType' when calling oauthToken");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling oauthToken");
      }

      // verify the required parameter 'xCorAPITargetID' is set
      if (xCorAPITargetID === undefined || xCorAPITargetID === null) {
        throw new Error("Missing the required parameter 'xCorAPITargetID' when calling oauthToken");
      }

      // verify the required parameter 'xCorAPIClientID' is set
      if (xCorAPIClientID === undefined || xCorAPIClientID === null) {
        throw new Error("Missing the required parameter 'xCorAPIClientID' when calling oauthToken");
      }

      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling oauthToken");
      }

      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling oauthToken");
      }

      // verify the required parameter 'xPSUIPAddress' is set
      if (xPSUIPAddress === undefined || xPSUIPAddress === null) {
        throw new Error("Missing the required parameter 'xPSUIPAddress' when calling oauthToken");
      }

      // verify the required parameter 'xPSUUserAgent' is set
      if (xPSUUserAgent === undefined || xPSUUserAgent === null) {
        throw new Error("Missing the required parameter 'xPSUUserAgent' when calling oauthToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-CorAPI-Target-ID': xCorAPITargetID,
        'X-CorAPI-Client-ID': xCorAPIClientID,
        'X-Correlation-ID': xCorrelationID,
        'User-Agent': userAgent,
        'X-PSU-IP-Address': xPSUIPAddress,
        'X-PSU-User-Agent': xPSUUserAgent
      };
      var formParams = {
        'grant_type': grantType,
        'code': opts['code'],
        'refresh_token': opts['refreshToken'],
        'redirect_uri': opts['redirectUri'],
        'client_id': clientId
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = OauthTokenResponse;

      return this.apiClient.callApi(
        '/oauth/token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
